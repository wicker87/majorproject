// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using majorproject.Server.Data;

#nullable disable

namespace majorproject.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240604065715_Newdb")]
    partial class Newdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce6c922d-a075-41ba-928b-ab718da843f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b61949be-76be-449f-bc66-535bddbf7b90",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a7b95d75-9c36-45cf-993f-504090b554cc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            RoleId = "ce6c922d-a075-41ba-928b-ab718da843f4"
                        },
                        new
                        {
                            UserId = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e7b4016a-fa59-4669-969f-36601182f51c",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "63929151-0e12-4c5c-a03c-01c34642856a",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("majorproject.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2fc5c8b-05b9-470e-aa0f-344fc356cc24",
                            Designation = "IT Manager",
                            Email = "janedoe@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1003,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@GMAIL.COM",
                            NormalizedUserName = "JANEDOE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkPne/ww9M3uBiMyloRZw6s8b/mzL/UuALw9bbjpjVVJ8Aqh0g81j3zmgCiVsYVaA==",
                            PhoneNumber = "64841415",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38aae0f3-b9ba-46dd-a9ec-b88f4e15c93e",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@gmail.com"
                        },
                        new
                        {
                            Id = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26e5f4dc-2d10-4fab-a6b9-426076fb5224",
                            Designation = "Safety Manager",
                            Email = "johnsmith@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2010,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@GMAIL.COM",
                            NormalizedUserName = "JOHNSMITH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAuWG58yu5SAmI/fmWpZ9ySirkg0o1c4lbA+IU1qi9DBv0wR5edvfd/NVVYeE3Tog==",
                            PhoneNumber = "67349033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72e468df-bca4-41e3-b33b-983bb69be3bf",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@gmail.com"
                        },
                        new
                        {
                            Id = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fd4a6d6-d3b9-4460-9bd4-2733e9337358",
                            Designation = "Safety Inspector",
                            Email = "stanleyhall@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1243,
                            FirstName = "Stanley",
                            LastName = "Hall",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYHALL@GMAIL.COM",
                            NormalizedUserName = "STANLEYHALL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIST+SeTDhSXnVoteEL12SN4oxSKHmJjtW4nkW6xwoBhT76/UPa0mKx3w/LJfNSg9g==",
                            PhoneNumber = "63960815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9feee28e-f633-40d2-a7e0-9551ed71b7f8",
                            TwoFactorEnabled = false,
                            UserName = "stanleyhall@gmail.com"
                        },
                        new
                        {
                            Id = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d58b6b20-e07c-4245-8d4b-4e5590ef3694",
                            Designation = "Safety Inspector",
                            Email = "elenareed@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1953,
                            FirstName = "Elena",
                            LastName = "Reed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENAREED@GMAIL.COM",
                            NormalizedUserName = "ELENAREED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOEwzNAUDumsqhF6KKHwod2tOAVpr06j8LGbW1NFFP1gH/AAoSe24VU8+4BCVpYT6A==",
                            PhoneNumber = "63450508",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a46ca23c-4ffe-4c2e-b6b6-59aa18cb4f1f",
                            TwoFactorEnabled = false,
                            UserName = "elenareed@gmail.com"
                        },
                        new
                        {
                            Id = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "967a58ae-86d6-49a2-a4d3-24992d68545a",
                            Designation = "Safety Inspector",
                            Email = "warrenyoung@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1331,
                            FirstName = "Warren",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARRENYOUNG@GMAIL.COM",
                            NormalizedUserName = "WARRENYOUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/U8UrxKXc35JHg9J5+3Z0avvbL76oQ576LZZu2WCqgIAlipXDv/Lvn2YOmhNbdPQ==",
                            PhoneNumber = "63388585",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c44ff07-da7a-4c75-a956-d011f34f97a5",
                            TwoFactorEnabled = false,
                            UserName = "warrenyoung@gmail.com"
                        },
                        new
                        {
                            Id = "e7b4016a-fa59-4669-969f-36601182f51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10f9f04d-d02d-429c-a605-2645b9610580",
                            Designation = "Safety Manager",
                            Email = "kevinjones@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1991,
                            FirstName = "Kevin",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVINJONES@GMAIL.COM",
                            NormalizedUserName = "KEVINJONES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXfoEym3qwm+RGXoD67A9Z/U/smLPBjvtyEDJeSHsSibvKsunDV62UQL9sZcoc+Xg==",
                            PhoneNumber = "68999888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c79d3a94-028c-45b6-8051-b4c3d4b550d3",
                            TwoFactorEnabled = false,
                            UserName = "kevinjones@gmail.com"
                        },
                        new
                        {
                            Id = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f1417bf-86a7-476e-bb22-1f086f1b6650",
                            Designation = "Safety Inspector",
                            Email = "bobbybrooks@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1507,
                            FirstName = "Bobby",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBYBROOKS@GMAIL.COM",
                            NormalizedUserName = "BOBBYBROOKS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED2XdvVTpZI2UYsvOjhy6ndBwIImggyPk8anN50d/kSyfvCBeb5XK2Flprwn3Cd4Wg==",
                            PhoneNumber = "62570046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35d530ba-c751-4d1a-b0f8-24fd0d2e07d6",
                            TwoFactorEnabled = false,
                            UserName = "bobbybrooks@gmail.com"
                        },
                        new
                        {
                            Id = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "218691a2-2ac9-44b0-932c-c71786c86178",
                            Designation = "Safety Manager",
                            Email = "jennielow@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1748,
                            FirstName = "Jennie",
                            LastName = "Low",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIELOW@GMAIL.COM",
                            NormalizedUserName = "JENNIELOW@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+7fLsBiHpBPdxRlWFVPsJX8yu0laDcQvLDAstRJvWLcn9rAXuQEEPk7lEcmm3lNw==",
                            PhoneNumber = "62247473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "939125e9-751e-41cf-a43a-a62d0472a67e",
                            TwoFactorEnabled = false,
                            UserName = "jennielow@gmail.com"
                        },
                        new
                        {
                            Id = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29a4ca84-ed45-45d2-8199-292fb9dcc0ee",
                            Designation = "Safety Inspector",
                            Email = "constancelee@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1483,
                            FirstName = "Constance",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCELEE@GMAIL.COM",
                            NormalizedUserName = "CONSTANCELEE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXItgdWPOh5odmKiYqPITugzXrZ/S6SPfjgIOb2MNhTQcuYywwsse5RbnsO0fSFyQ==",
                            PhoneNumber = "67457717",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a1c097-f0bb-4e24-b96d-3de1e008ea22",
                            TwoFactorEnabled = false,
                            UserName = "constancelee@gmail.com"
                        },
                        new
                        {
                            Id = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec37b001-33eb-4033-a2b3-a4789bcb673b",
                            Designation = "Safety Inspector",
                            Email = "bendanis@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2024,
                            FirstName = "Ben",
                            LastName = "Danis",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENDANIS@GMAIL.COM",
                            NormalizedUserName = "BENDANIS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJqPN4bWrvyowM0QZK0v/rtJ0COp+6B2vQLlLRBQkYIs1ozJ0bsc0GNUnG0w2nDnDQ==",
                            PhoneNumber = "68626846",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bb23b6d-76d8-478f-ad09-35f6b76bf4be",
                            TwoFactorEnabled = false,
                            UserName = "bendanis@gmail.com"
                        },
                        new
                        {
                            Id = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1443257b-b1a0-4f93-84fd-9e78355d1723",
                            Designation = "Safety Inspector",
                            Email = "jimmybaker@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2156,
                            FirstName = "Jimmy",
                            LastName = "Baker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIMMYBAKER@GMAIL.COM",
                            NormalizedUserName = "JIMMYBAKER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKYDTKNLqf7Jjtl/Q7vpNU9WA5PwYbnyXp0KSr/IrtduAKve8xxnQn32NtgNjX3s5A==",
                            PhoneNumber = "67789981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3fa1f07-e82d-4182-a719-ac97b5e5bda4",
                            TwoFactorEnabled = false,
                            UserName = "jimmybaker@gmail.com"
                        },
                        new
                        {
                            Id = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7542cd8-7abf-4384-9cc8-ed3eea54b50e",
                            Designation = "Safety Inspector",
                            Email = "jakehoward@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1397,
                            FirstName = "Jake",
                            LastName = "Howard",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKEHOWARD@GMAIL.COM",
                            NormalizedUserName = "JAKEHOWARD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsdl/y/Ez9MQFmIEPaXKtoMuokony2TBTW+x90bS92mFwvxoIrwNpbObfLtmTcpZw==",
                            PhoneNumber = "62678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74f5f6ad-99f0-4e4a-ad5f-98f015242c31",
                            TwoFactorEnabled = false,
                            UserName = "jakehoward@gmail.com"
                        },
                        new
                        {
                            Id = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5091170-8a0b-4dbe-a63d-d69fc4df0c13",
                            Designation = "Safety Inspector",
                            Email = "ninachoo@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1170,
                            FirstName = "Nina",
                            LastName = "Choo",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINACHOO@GMAIL.COM",
                            NormalizedUserName = "NINACHOO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPxekOfppNCku4kxya7mE0WKcCWNCo6y5TACiv49WDLVPkiAH8V6zF62FHA57PQ2g==",
                            PhoneNumber = "65366623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e37a8047-6492-4fb7-89ae-1c8e3df3dbf8",
                            TwoFactorEnabled = false,
                            UserName = "ninachoo@gmail.com"
                        },
                        new
                        {
                            Id = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55c6b882-9a85-4a05-a843-29aab7d1a079",
                            Designation = "Safety Inspector",
                            Email = "tommyjones@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1886,
                            FirstName = "Tommy",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMMYJONES@GMAIL.COM",
                            NormalizedUserName = "TOMMYJONES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENwQ2ba7phOpi9A+e8rKIDlma/aC0a1P1zpZK2w0bJmZg1qogNOgdhQRUz/DLMnzpA==",
                            PhoneNumber = "65325334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c23ceaf-a9c0-458f-a408-5137c6a2c2c8",
                            TwoFactorEnabled = false,
                            UserName = "tommyjones@gmail.com"
                        },
                        new
                        {
                            Id = "63929151-0e12-4c5c-a03c-01c34642856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e76e174-2d2d-4368-910f-6d75eb7b0c8c",
                            Designation = "Safety Inspector",
                            Email = "elizaross@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1140,
                            FirstName = "Eliza",
                            LastName = "Ross",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZAROSS@GMAIL.COM",
                            NormalizedUserName = "ELIZAROSS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwDnxRHPBCSHgf6e7ISntU2mOLlla5mo/vyYvkTRL0il7u6ppZJ2NMKFimfhEkCrw==",
                            PhoneNumber = "67780373",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "220e0f0a-7436-4e72-bb1c-6e818c6bf97b",
                            TwoFactorEnabled = false,
                            UserName = "elizaross@gmail.com"
                        },
                        new
                        {
                            Id = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1e95e21-6d92-4152-a565-9c7742d216ba",
                            Designation = "Safety Manager",
                            Email = "benjaminscott@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1794,
                            FirstName = "Benjamin",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJAMINSCOTT@GMAIL.COM",
                            NormalizedUserName = "BENJAMINSCOTT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCrxZdGPnHRmNfgVLpe8kpoZyjARqLv65uZzn6D+nL2ma3wAwvo6CFZrJz1EARfiA==",
                            PhoneNumber = "62610071",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f9ef320-e4dd-4453-adee-6ae2396b141d",
                            TwoFactorEnabled = false,
                            UserName = "benjaminscott@gmail.com"
                        },
                        new
                        {
                            Id = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d52ec7ca-d939-40dc-acfd-ef358ab265e3",
                            Designation = "Safety Inspector",
                            Email = "kylethomas@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1426,
                            FirstName = "Kyle",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLETHOMAS@GMAIL.COM",
                            NormalizedUserName = "KYLETHOMAS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ53aXepwknZm8yD+8zNBL1gwzE1HVduWOx5qE9sazReSkol6FMNIxY3QintEbdILw==",
                            PhoneNumber = "67361183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11906851-5e60-46c6-967a-bd8d7dda50e4",
                            TwoFactorEnabled = false,
                            UserName = "kylethomas@gmail.com"
                        },
                        new
                        {
                            Id = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26bd16b3-7da6-469d-a55a-cfebb607eb32",
                            Designation = "Safety Inspector",
                            Email = "maddietay@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1224,
                            FirstName = "Maddie",
                            LastName = "Tay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADDIETAY@GMAIL.COM",
                            NormalizedUserName = "MADDIETAY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBd3xHQzcffcH+vioStMYFtvqPAKUIiWqXtrn8JiYy103DqJC77HTGUd5yD4VYxZvA==",
                            PhoneNumber = "63457266",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1df1aa1-8b7c-45e1-b638-c2ead3e53a01",
                            TwoFactorEnabled = false,
                            UserName = "maddietay@gmail.com"
                        },
                        new
                        {
                            Id = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "301b8f3f-056d-4e1d-96c0-39ffebf7426f",
                            Designation = "Safety Inspector",
                            Email = "larryparker@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2144,
                            FirstName = "Larry",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRYPARKER@GMAIL.COM",
                            NormalizedUserName = "LARRYPARKER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENIq+Vz80qlGBiFvUL9Lw5S6VhGrZX6kGH4Bgy/O+leR/V7wAEwuHUik4P59QBmucw==",
                            PhoneNumber = "67771504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1d19e2b-778a-444a-aa0e-7ba2c5a9e855",
                            TwoFactorEnabled = false,
                            UserName = "larryparker@gmail.com"
                        },
                        new
                        {
                            Id = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35ab4f3e-6abd-427a-860f-149534ba41c4",
                            Designation = "Safety Manager",
                            Email = "emilybrown@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1061,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYBROWN@GMAIL.COM",
                            NormalizedUserName = "EMILYBROWN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4DHwV6uawYPp+y4Yig0Wizmd2/0TEOltuu3bleXEX0L6nlvWPZ6wLJpjy6I6g9mw==",
                            PhoneNumber = "67528856",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26859201-941a-4850-b255-9045638ab955",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown@gmail.com"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleInjury")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Hazards");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskTeamId");

                    b.ToTable("RiskAssessments");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ImplementingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId");

                    b.ToTable("RiskControls");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExistingRiskControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HazardId")
                        .HasColumnType("int");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("RiskEvaluations");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Eliza Ross",
                            Member1 = "Nina Choo",
                            Member2 = "Maddie Tay",
                            Member3 = "Stanley Hall",
                            Member4 = "Warren Young",
                            Member5 = "Jake Howard"
                        },
                        new
                        {
                            Id = 2,
                            Leader = "Kyle Thomas",
                            Member1 = "Constance Lee",
                            Member2 = "Bobby Brooks"
                        },
                        new
                        {
                            Id = 3,
                            Leader = "Tommy Jones",
                            Member1 = "Elena Reed",
                            Member2 = "Ben Danis",
                            Member3 = "Larry Parker",
                            Member4 = "Jimmy Baker"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskAssessment", "RiskAssessment")
                        .WithMany("Activities")
                        .HasForeignKey("RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Activity", "Activity")
                        .WithMany("Hazards")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskTeam", "RiskTeam")
                        .WithMany()
                        .HasForeignKey("RiskTeamId");

                    b.Navigation("RiskTeam");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskEvaluation", "RiskEvaluation")
                        .WithMany()
                        .HasForeignKey("RiskEvaluationId");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Hazard", "Hazard")
                        .WithMany("RiskEvaluations")
                        .HasForeignKey("HazardId");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.Navigation("Hazards");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.Navigation("RiskEvaluations");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
