// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using majorproject.Server.Data;

#nullable disable

namespace majorproject.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240605081741_Newdb")]
    partial class Newdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce6c922d-a075-41ba-928b-ab718da843f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b61949be-76be-449f-bc66-535bddbf7b90",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a7b95d75-9c36-45cf-993f-504090b554cc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            RoleId = "ce6c922d-a075-41ba-928b-ab718da843f4"
                        },
                        new
                        {
                            UserId = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e7b4016a-fa59-4669-969f-36601182f51c",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "63929151-0e12-4c5c-a03c-01c34642856a",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("majorproject.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1f107fa-0979-4ae0-9ffe-03de7b177c5f",
                            Designation = "IT Manager",
                            Email = "janedoe@admin.com",
                            EmailConfirmed = false,
                            EmployeeID = 1003,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@ADMIN.COM",
                            NormalizedUserName = "JANEDOE@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9SuXIvMKJt7QlcevfRP2BEsYtCzcVK2YQ67FyK9FtOLRTWM9HcvRMXrVXt7+v4qg==",
                            PhoneNumber = "64841415",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e16489db-2bb2-4d34-8400-1c036d6a73ba",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@admin.com"
                        },
                        new
                        {
                            Id = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ac2988-655e-48cd-b0d2-2ed6618b1ac9",
                            Designation = "Safety Manager",
                            Email = "johnsmith@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 2010,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@MANAGER.COM",
                            NormalizedUserName = "JOHNSMITH@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIOxBKc2ASRxR/Mryw6XezkBsaDT6LQqAvjqvGvNC+MwYE6HhkPfmRJBgpAJCyLFuw==",
                            PhoneNumber = "67349033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9f4494f-3a7b-4901-9548-f6bd1b0dce0f",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@manager.com"
                        },
                        new
                        {
                            Id = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "baa741c1-b6d3-4457-9a95-7ba7277e8859",
                            Designation = "Safety Inspector",
                            Email = "stanleyhall@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1243,
                            FirstName = "Stanley",
                            LastName = "Hall",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYHALL@EMPLOYEE.COM",
                            NormalizedUserName = "STANLEYHALL@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFEeUX/lK5Nt3rLnBWrDBsLcYiq9uDAIF3DfDjdT7G5yOUNZonDqv4wd+AYmQgHqdQ==",
                            PhoneNumber = "63960815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5f1894b-4dd4-4899-a58e-fa27bbe88984",
                            TwoFactorEnabled = false,
                            UserName = "stanleyhall@employee.com"
                        },
                        new
                        {
                            Id = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6da951c0-eec4-4dc6-813a-6a1d0117a6fa",
                            Designation = "Safety Inspector",
                            Email = "elenareed@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1953,
                            FirstName = "Elena",
                            LastName = "Reed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENAREED@EMPLOYEE.COM",
                            NormalizedUserName = "ELENAREED@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6g2KDG/aMhkTWu2BsgIVSp8AVhqSRQA4WUuFfehzwq0neYAaEayUVPi0t+HB+1Kg==",
                            PhoneNumber = "63450508",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c5032e0-9856-4cc2-a296-4024c87eedd6",
                            TwoFactorEnabled = false,
                            UserName = "elenareed@employee.com"
                        },
                        new
                        {
                            Id = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31164b72-8ff0-4e53-9f3b-ade4a36927ab",
                            Designation = "Safety Inspector",
                            Email = "warrenyoung@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1331,
                            FirstName = "Warren",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARRENYOUNG@EMPLOYEE.COM",
                            NormalizedUserName = "WARRENYOUNG@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAGGrN8Mdz37qNsTz6cVem69OdLbGIBkVsBMjvdvar9yCni9RHyrs0Oehe8eZm02ng==",
                            PhoneNumber = "63388585",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d70b4f0-f4c4-4659-98d7-64e120690424",
                            TwoFactorEnabled = false,
                            UserName = "warrenyoung@employee.com"
                        },
                        new
                        {
                            Id = "e7b4016a-fa59-4669-969f-36601182f51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e72af336-6819-4129-9f88-deafdfd31bb4",
                            Designation = "Safety Manager",
                            Email = "kevinjones@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1991,
                            FirstName = "Kevin",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVINJONES@MANAGER.COM",
                            NormalizedUserName = "KEVINJONES@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA/AaGLCMSNd1wJ3VxcX2diBnUq07aIB2P8eCmG0rIfN1DyA1aMEROgEKiQxY8Tksw==",
                            PhoneNumber = "68999888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d9586e5-d497-4724-b866-2dccc31859dc",
                            TwoFactorEnabled = false,
                            UserName = "kevinjones@manager.com"
                        },
                        new
                        {
                            Id = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dab6bf65-ae84-4c5e-acf0-49cba82ca0ad",
                            Designation = "Safety Inspector",
                            Email = "bobbybrooks@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1507,
                            FirstName = "Bobby",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBYBROOKS@EMPLOYEE.COM",
                            NormalizedUserName = "BOBBYBROOKS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEASOpgs+XsezQPpKSUapCe+xTCg8aOiKl2y+mnI6S0xdSpFXZ2aH5rodS5cZhsNy9A==",
                            PhoneNumber = "62570046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3016b363-f28d-49c2-9d91-5aa4c1e46a35",
                            TwoFactorEnabled = false,
                            UserName = "bobbybrooks@employee.com"
                        },
                        new
                        {
                            Id = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47d82ce6-4bb2-4a09-bc98-0488f6020026",
                            Designation = "Safety Manager",
                            Email = "jennielow@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1748,
                            FirstName = "Jennie",
                            LastName = "Low",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIELOW@MANAGER.COM",
                            NormalizedUserName = "JENNIELOW@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOtXRV5pB3pYdoBjO+iNDU1wdm8d1Og/+Bj8jU+tFTWdtIfxaI8zwq4aYMgYfXolg==",
                            PhoneNumber = "62247473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d60a5f49-8554-4683-985c-132e8984a822",
                            TwoFactorEnabled = false,
                            UserName = "jennielow@manager.com"
                        },
                        new
                        {
                            Id = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1bfd41d-c993-4622-a3bc-a25b9ffd7917",
                            Designation = "Safety Inspector",
                            Email = "constancelee@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1483,
                            FirstName = "Constance",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCELEE@EMPLOYEE.COM",
                            NormalizedUserName = "CONSTANCELEE@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJhNOpUIDr+OdY4HydugyRUEPfgztoLxhpCvpnH8Riz1QzkiLTwZcwQoaXYIVP30KQ==",
                            PhoneNumber = "67457717",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1356ec38-4a4f-496e-9f30-d297bb139e0d",
                            TwoFactorEnabled = false,
                            UserName = "constancelee@employee.com"
                        },
                        new
                        {
                            Id = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f751e57c-08d0-4330-8383-609bac93c7c0",
                            Designation = "Safety Inspector",
                            Email = "bendanis@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2024,
                            FirstName = "Ben",
                            LastName = "Danis",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENDANIS@EMPLOYEE.COM",
                            NormalizedUserName = "BENDANIS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbrnTSNtraP/KSSN7j5r88HS/9Lvo2t9fhQlm1sYt8kfenedISsLptc74Q0ghwYgw==",
                            PhoneNumber = "68626846",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af05215e-7b4a-401a-b1ec-7cf94aefbb5a",
                            TwoFactorEnabled = false,
                            UserName = "bendanis@employee.com"
                        },
                        new
                        {
                            Id = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f260d61-0ae5-4ba9-8f27-5ebecc2ec531",
                            Designation = "Safety Inspector",
                            Email = "jimmybaker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2156,
                            FirstName = "Jimmy",
                            LastName = "Baker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIMMYBAKER@EMPLOYEE.COM",
                            NormalizedUserName = "JIMMYBAKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0lCzVBDG0Q9D4PnG4Jdik7IdoRUd60JyW3BJy6NM+kMIqgWBOWKeXo0PRF7NBExQ==",
                            PhoneNumber = "67789981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf490f20-2057-4900-b3ee-2babfdbd847a",
                            TwoFactorEnabled = false,
                            UserName = "jimmybaker@employee.com"
                        },
                        new
                        {
                            Id = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d931b681-5381-4bf9-8358-89b28dfc5d0c",
                            Designation = "Safety Inspector",
                            Email = "jakehoward@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1397,
                            FirstName = "Jake",
                            LastName = "Howard",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKEHOWARD@EMPLOYEE.COM",
                            NormalizedUserName = "JAKEHOWARD@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZdcVST2T+o8wZdMJx6pLFvDXbtJ3DizT1zL4G8Uwc0WnTNfFn+sO+wq7afmp0dpQ==",
                            PhoneNumber = "62678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d72d18c-f5f4-4503-ba82-126fee5fe62f",
                            TwoFactorEnabled = false,
                            UserName = "jakehoward@employee.com"
                        },
                        new
                        {
                            Id = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa491985-922d-4985-80fb-a7ed95535fe4",
                            Designation = "Safety Inspector",
                            Email = "ninachoo@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1170,
                            FirstName = "Nina",
                            LastName = "Choo",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINACHOO@EMPLOYEE.COM",
                            NormalizedUserName = "NINACHOO@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP1fdzQ6elq9xCvkqoSXv+G9ZWKnMVVvl7AkqQJXqYmyjs20fei+dWCRUdVVZ5DW7g==",
                            PhoneNumber = "65366623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03300138-c35e-4e68-9188-96438c0a3ac4",
                            TwoFactorEnabled = false,
                            UserName = "ninachoo@employee.com"
                        },
                        new
                        {
                            Id = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cd749f4-9799-43cb-b143-74e1f58482a0",
                            Designation = "Safety Inspector",
                            Email = "tommyjones@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1886,
                            FirstName = "Tommy",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMMYJONES@EMPLOYEE.COM",
                            NormalizedUserName = "TOMMYJONES@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQgrZ7UUrBwZk725yinjy3GiLSjhF9/fOOiDmLAvo35neWY0RurzGi/DLj7aSw50g==",
                            PhoneNumber = "65325334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867b2122-5845-4be8-b02a-2274d0c44b21",
                            TwoFactorEnabled = false,
                            UserName = "tommyjones@employee.com"
                        },
                        new
                        {
                            Id = "63929151-0e12-4c5c-a03c-01c34642856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a0a9d5a-8e43-48ea-8ed7-d81553ef6779",
                            Designation = "Safety Inspector",
                            Email = "elizaross@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1140,
                            FirstName = "Eliza",
                            LastName = "Ross",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZAROSS@EMPLOYEE.COM",
                            NormalizedUserName = "ELIZAROSS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBA2AcWP6zDOdMcnrAPP+u9uzrilZQFLKJkp08ZKBoKIudNlQ9VwJIlzRTauxB8GyQ==",
                            PhoneNumber = "67780373",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e07a8255-20a6-4e64-9485-75df69142ac9",
                            TwoFactorEnabled = false,
                            UserName = "elizaross@employee.com"
                        },
                        new
                        {
                            Id = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd46c8e9-7ec5-474d-ae3e-c23733cb1a5a",
                            Designation = "Safety Manager",
                            Email = "benjaminscott@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1794,
                            FirstName = "Benjamin",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJAMINSCOTT@MANAGER.COM",
                            NormalizedUserName = "BENJAMINSCOTT@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFM4kAU62vcWEBaI3UKcYwZW21G5WqcclEagmotlco1S0UG88+/865LEhfkQIlKjw==",
                            PhoneNumber = "62610071",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57dcbb98-ce08-4474-af09-42cf28b2a3a8",
                            TwoFactorEnabled = false,
                            UserName = "benjaminscott@manager.com"
                        },
                        new
                        {
                            Id = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79bb7d29-10a5-401d-8170-487905f1906d",
                            Designation = "Safety Inspector",
                            Email = "kylethomas@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1426,
                            FirstName = "Kyle",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLETHOMAS@EMPLOYEE.COM",
                            NormalizedUserName = "KYLETHOMAS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/3x4lINCqpCxvz1xGNJJaJ++0fyfh3p2sbSIaVf1HQu2PczJH/HdtTvNTW0kicVQ==",
                            PhoneNumber = "67361183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "889653ec-a4f1-46e9-a0fa-e9fa281c68b3",
                            TwoFactorEnabled = false,
                            UserName = "kylethomas@employee.com"
                        },
                        new
                        {
                            Id = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d89266b-9bb1-4521-85d4-e315df825004",
                            Designation = "Safety Inspector",
                            Email = "maddietay@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1224,
                            FirstName = "Maddie",
                            LastName = "Tay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADDIETAY@EMPLOYEE.COM",
                            NormalizedUserName = "MADDIETAY@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMndX1+0rLMDCjayexqOXKgnziZfT41f8T63nOyDlmn4FwxzdEvPrH5S/hTqaclKUQ==",
                            PhoneNumber = "63457266",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09559dfc-312b-4e30-86fa-67909a172846",
                            TwoFactorEnabled = false,
                            UserName = "maddietay@employee.com"
                        },
                        new
                        {
                            Id = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e161574-f453-440b-85c1-7d9d4981eb4a",
                            Designation = "Safety Inspector",
                            Email = "larryparker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2144,
                            FirstName = "Larry",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRYPARKER@EMPLOYEE.COM",
                            NormalizedUserName = "LARRYPARKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH91PhLY1KP6jHKOXc/vzRfrs4msTKZrSpZT3zwGWsA4wlMKDJ7KNFWROgOnA2c8Vg==",
                            PhoneNumber = "67771504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77d97db9-b9c0-4926-ae4d-99c84b57a561",
                            TwoFactorEnabled = false,
                            UserName = "larryparker@employee.com"
                        },
                        new
                        {
                            Id = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7deb35b-d25b-4676-8031-995d88cb11e6",
                            Designation = "Safety Manager",
                            Email = "emilybrown@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1061,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYBROWN@MANAGER.COM",
                            NormalizedUserName = "EMILYBROWN@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECrR09zHsEXtJEjIcY+OR+beHeUuRP1EF704hXUYuS/qcs7WtKslEPIURmHaSkgEWQ==",
                            PhoneNumber = "67528856",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4a49a99-99ac-423b-9006-896e9c6368a3",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown@manager.com"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentId = 1,
                            Name = "Use of MP facility"
                        },
                        new
                        {
                            Id = 2,
                            AssessmentId = 1,
                            Name = "Use of BYOD Notebooks, PCs, Equipment"
                        },
                        new
                        {
                            Id = 3,
                            AssessmentId = 1,
                            Name = "Use of soldering iron in MP labs for hardware related projects"
                        },
                        new
                        {
                            Id = 4,
                            AssessmentId = 1,
                            Name = "Handling of hand tools in MP Labs for hardware related projects"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleInjury")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Hazards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            Name = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            PossibleInjury = "Bodily Injuries"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Name = "Falling ceiling board and and lights holding",
                            PossibleInjury = "Head & Bodily Injuries"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Name = "Contact with electrical parts and faulty cables with live exposed wires",
                            PossibleInjury = "Electrocution"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            Name = "Contact with hot surface / soldering iron",
                            PossibleInjury = "Burns to exposed skin"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 3,
                            Name = "Piercing by soldering iron tip",
                            PossibleInjury = "Minor Cuts"
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 3,
                            Name = "Inhaling fumes from soldering",
                            PossibleInjury = "Eye, nose and throat irritation"
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 4,
                            Name = "Contact with sharp edges and pointed tips",
                            PossibleInjury = "Injury to exposed skin/hand"
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 4,
                            Name = "Trip and fall due to hand tools/equipment on the floor",
                            PossibleInjury = "Head & Bodily Injuries"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskTeamId");

                    b.ToTable("RiskAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2024, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedStatus = true,
                            Approver = "John Smith",
                            AssessmentDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Temasek Poly (ENG)",
                            LastReviewDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "EN10-2-15",
                            Name = "CEN MP Risk Assessment",
                            NextReviewDate = new DateTime(2027, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Process = "CEN MP - April 2024",
                            TeamId = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ImplementingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId");

                    b.ToTable("RiskControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalControls = "All electrical appliances have proper electrical insulation.",
                            DueDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationId = 5,
                            ImplementingPerson = "David Young",
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExistingRiskControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HazardId")
                        .HasColumnType("int");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("RiskEvaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExistingRiskControls = "Loose network / power extension cables on the floor are taped",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 2,
                            ExistingRiskControls = "Visual check of the lab for any damages floor tiles and report to EFM @ 67805955 for repair and temporary taped up the damaged floor tiles",
                            HazardId = 1,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 3,
                            ExistingRiskControls = "Get cleaner to mop the floor, report to EFM @ 67805955",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 4,
                            ExistingRiskControls = "Visual check of the lab for any damages and report to EFM @ 67805955 for repair",
                            HazardId = 2,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 5,
                            ExistingRiskControls = "Do not touch electrical appliances with wet hands",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 6,
                            ExistingRiskControls = "Ensure there is no frayed or exposed wiring, report EFM @ 67805955 or Staff-in-charge immediately",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 7,
                            ExistingRiskControls = "Switch off the power when plugging/unplugging the power plug from the wall socket",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 8,
                            ExistingRiskControls = "Conduct briefing on proper use of soldering iron prior to first-time use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 9,
                            ExistingRiskControls = "Remain focused on the soldering task and not engage in conversation.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 10,
                            ExistingRiskControls = "Soldering iron must be returned to is holder and be placed in its holder when not in use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 11,
                            ExistingRiskControls = "Return soldering iron to stand after use",
                            HazardId = 5,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 12,
                            ExistingRiskControls = "Avoid the “head-bent-over-project” soldering posture.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 13,
                            ExistingRiskControls = "Ensure adequate ventilation in the lab when soldering.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 14,
                            ExistingRiskControls = "Using of solder fume extractor.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 15,
                            ExistingRiskControls = "Adopt safe working practices when handling sharp tools.",
                            HazardId = 7,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 16,
                            ExistingRiskControls = "Ensure all unused equipment/tools are kept properly when not in use or when away.",
                            HazardId = 8,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Eliza Ross",
                            Member1 = "Nina Choo",
                            Member2 = "Maddie Tay",
                            Member3 = "Stanley Hall",
                            Member4 = "Warren Young",
                            Member5 = "Jake Howard"
                        },
                        new
                        {
                            Id = 2,
                            Leader = "Kyle Thomas",
                            Member1 = "Constance Lee",
                            Member2 = "Bobby Brooks"
                        },
                        new
                        {
                            Id = 3,
                            Leader = "Tommy Jones",
                            Member1 = "Elena Reed",
                            Member2 = "Ben Danis",
                            Member3 = "Larry Parker",
                            Member4 = "Jimmy Baker"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskAssessment", "RiskAssessment")
                        .WithMany("Activities")
                        .HasForeignKey("RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Activity", "Activity")
                        .WithMany("Hazards")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskTeam", "RiskTeam")
                        .WithMany()
                        .HasForeignKey("RiskTeamId");

                    b.Navigation("RiskTeam");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskEvaluation", "RiskEvaluation")
                        .WithMany()
                        .HasForeignKey("RiskEvaluationId");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Hazard", "Hazard")
                        .WithMany("RiskEvaluations")
                        .HasForeignKey("HazardId");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.Navigation("Hazards");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.Navigation("RiskEvaluations");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
