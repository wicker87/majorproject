// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using majorproject.Server.Data;

#nullable disable

namespace majorproject.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce6c922d-a075-41ba-928b-ab718da843f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b61949be-76be-449f-bc66-535bddbf7b90",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a7b95d75-9c36-45cf-993f-504090b554cc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            RoleId = "ce6c922d-a075-41ba-928b-ab718da843f4"
                        },
                        new
                        {
                            UserId = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e7b4016a-fa59-4669-969f-36601182f51c",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "63929151-0e12-4c5c-a03c-01c34642856a",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("majorproject.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05c10dd6-89e1-4abf-860d-1972171c76cf",
                            Designation = "IT Manager",
                            Email = "janedoe@admin.com",
                            EmailConfirmed = false,
                            EmployeeID = 1003,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@ADMIN.COM",
                            NormalizedUserName = "JANEDOE@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECAYDITteblWcDhiqZaLHrCibykRipXoMvF0L8sNZcXGulNn2JekxE8rSoH+FzfUwg==",
                            PhoneNumber = "64841415",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55d46a47-6076-4ccb-9be3-5c36e896e2c5",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@admin.com"
                        },
                        new
                        {
                            Id = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37449d2a-2282-41b5-8401-df6d4517dada",
                            Designation = "Safety Manager",
                            Email = "johnsmith@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 2010,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@MANAGER.COM",
                            NormalizedUserName = "JOHNSMITH@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPUygM17CP0emWu9djSowlS3RZ3OxIqR6mSG8NupmU4qqOyLkfwEOhw1FJvbzVchTQ==",
                            PhoneNumber = "67349033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9d0e11d-088e-4df0-9c7a-9df17a1324c6",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@manager.com"
                        },
                        new
                        {
                            Id = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e960d7e2-e2e7-4062-b0ad-873180a3f253",
                            Designation = "Safety Inspector",
                            Email = "stanleyhall@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1243,
                            FirstName = "Stanley",
                            LastName = "Hall",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYHALL@EMPLOYEE.COM",
                            NormalizedUserName = "STANLEYHALL@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBpBPCL3NRB4fGWw9lCdo21k+i97dQCx5Y/sDxsuomzbC8icvk4ALDclmATR5Sa0uw==",
                            PhoneNumber = "63960815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bb84b48-68d5-4bdf-8885-07307803dd1b",
                            TwoFactorEnabled = false,
                            UserName = "stanleyhall@employee.com"
                        },
                        new
                        {
                            Id = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72cbf85a-b138-4e52-8f5b-8607d347735a",
                            Designation = "Safety Inspector",
                            Email = "elenareed@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1953,
                            FirstName = "Elena",
                            LastName = "Reed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENAREED@EMPLOYEE.COM",
                            NormalizedUserName = "ELENAREED@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/eEXhaOAEc8NrYPcqDxZLQQqvvtWiHbMQTiqo/AlR/jncGT+ARqO8ukWVfiE75Rw==",
                            PhoneNumber = "63450508",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eb73ab1-ca34-4c69-a667-280b3a2459cc",
                            TwoFactorEnabled = false,
                            UserName = "elenareed@employee.com"
                        },
                        new
                        {
                            Id = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c5f3648-331e-4b3b-952a-f9a1b482e0d1",
                            Designation = "Safety Inspector",
                            Email = "warrenyoung@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1331,
                            FirstName = "Warren",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARRENYOUNG@EMPLOYEE.COM",
                            NormalizedUserName = "WARRENYOUNG@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPG0I1WDmf5F9n8dq975awU3cCu87Dk3wyOlAzw4Q1SQZ6qbZpZc3XDl+aIb4rywg==",
                            PhoneNumber = "63388585",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d5cb13-e555-495f-8140-38266b8108e5",
                            TwoFactorEnabled = false,
                            UserName = "warrenyoung@employee.com"
                        },
                        new
                        {
                            Id = "e7b4016a-fa59-4669-969f-36601182f51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2918d109-5832-4bec-b4be-8f7ee5275f89",
                            Designation = "Safety Manager",
                            Email = "kevinjones@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1991,
                            FirstName = "Kevin",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVINJONES@MANAGER.COM",
                            NormalizedUserName = "KEVINJONES@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXAgLaX7bqlHQOW0+jyV5iZ0hllt1pyyvqx3fcYq4mHfTmJs0KHKkywJ6j8vazyww==",
                            PhoneNumber = "68999888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "389d2f6c-cd20-4380-afc6-a5d45a06eecd",
                            TwoFactorEnabled = false,
                            UserName = "kevinjones@manager.com"
                        },
                        new
                        {
                            Id = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77afca09-5ae3-41cb-b1b4-ff578f3c8fcc",
                            Designation = "Safety Inspector",
                            Email = "bobbybrooks@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1507,
                            FirstName = "Bobby",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBYBROOKS@EMPLOYEE.COM",
                            NormalizedUserName = "BOBBYBROOKS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4auxIXiZVCRvXap1/vvUmBbHuIKEIu5G8MpHgvVOuDtzENiEPICXFwYYuNlla2ew==",
                            PhoneNumber = "62570046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b66f608-eeac-4c64-8855-26d3eba0a12c",
                            TwoFactorEnabled = false,
                            UserName = "bobbybrooks@employee.com"
                        },
                        new
                        {
                            Id = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eb4d1a8-4e2d-4ce7-998d-2869d4b9e864",
                            Designation = "Safety Manager",
                            Email = "jennielow@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1748,
                            FirstName = "Jennie",
                            LastName = "Low",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIELOW@MANAGER.COM",
                            NormalizedUserName = "JENNIELOW@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKCChrGxiNr3MwvricW2+o3TNVYIX+pTBydMGRdbM9DLD3FV91zLgo48oKTPf99QA==",
                            PhoneNumber = "62247473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85063525-a6e1-44e4-8167-7c243e74f899",
                            TwoFactorEnabled = false,
                            UserName = "jennielow@manager.com"
                        },
                        new
                        {
                            Id = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6836df6-e65a-43ae-8bc9-c2c2229a9ce0",
                            Designation = "Safety Inspector",
                            Email = "constancelee@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1483,
                            FirstName = "Constance",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCELEE@EMPLOYEE.COM",
                            NormalizedUserName = "CONSTANCELEE@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBXeBUXnM/caAPkHBeJ90pKxCDd7OSeOjzqgAiZxJeuyjULSJibg8APq/gNt/J9ewQ==",
                            PhoneNumber = "67457717",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e89236c7-bac0-4b93-93e9-14e1e820605b",
                            TwoFactorEnabled = false,
                            UserName = "constancelee@employee.com"
                        },
                        new
                        {
                            Id = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36acb82c-1ad9-4465-b77f-0e069212b133",
                            Designation = "Safety Inspector",
                            Email = "bendanis@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2024,
                            FirstName = "Ben",
                            LastName = "Danis",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENDANIS@EMPLOYEE.COM",
                            NormalizedUserName = "BENDANIS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7QsFUKNKhnSqtRwiz3uI4eoUEl2l2jFfBx9Oh1Ur9S9D09cxMddfje9VkQqSnD5w==",
                            PhoneNumber = "68626846",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4f03968-8ccd-444a-914f-46bef6694b81",
                            TwoFactorEnabled = false,
                            UserName = "bendanis@employee.com"
                        },
                        new
                        {
                            Id = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae1ebb88-3d78-4796-be73-1638b66bf08f",
                            Designation = "Safety Inspector",
                            Email = "jimmybaker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2156,
                            FirstName = "Jimmy",
                            LastName = "Baker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIMMYBAKER@EMPLOYEE.COM",
                            NormalizedUserName = "JIMMYBAKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKUmL5ndgr/0FDOSjpnfoLEoplLeGuCqHMUJqxdwDaUSGK/nl8w9inTI+zhjg5dsg==",
                            PhoneNumber = "67789981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "679c5982-4920-42b3-a04b-04f5025b6cca",
                            TwoFactorEnabled = false,
                            UserName = "jimmybaker@employee.com"
                        },
                        new
                        {
                            Id = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4722bfc3-9bd1-43ad-bf0e-965f8cc5f4f4",
                            Designation = "Safety Inspector",
                            Email = "jakehoward@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1397,
                            FirstName = "Jake",
                            LastName = "Howard",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKEHOWARD@EMPLOYEE.COM",
                            NormalizedUserName = "JAKEHOWARD@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED9OKfQD56fAOnObXFP/r4T5wYIhnYmRcQQonjzM+FebFsyL/knaS6rlBerKaqlSoA==",
                            PhoneNumber = "62678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ef03c3a-c28d-442a-bb2f-439918cbae5c",
                            TwoFactorEnabled = false,
                            UserName = "jakehoward@employee.com"
                        },
                        new
                        {
                            Id = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6e987c9-adb0-48ed-be53-8abf3a878935",
                            Designation = "Safety Inspector",
                            Email = "ninachoo@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1170,
                            FirstName = "Nina",
                            LastName = "Choo",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINACHOO@EMPLOYEE.COM",
                            NormalizedUserName = "NINACHOO@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECHEdBWKRX567QKJiuYdACXuTGulQT9Rk3AIvDYVVbak3uI8bZmCU7fFfbpUlbiT+A==",
                            PhoneNumber = "65366623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee978c49-b884-48fc-b2b2-2af55e6812cc",
                            TwoFactorEnabled = false,
                            UserName = "ninachoo@employee.com"
                        },
                        new
                        {
                            Id = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2f83e26-7c99-4bcb-8587-633b07503556",
                            Designation = "Safety Inspector",
                            Email = "tommyjones@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1886,
                            FirstName = "Tommy",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMMYJONES@EMPLOYEE.COM",
                            NormalizedUserName = "TOMMYJONES@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENVd3o54T1yQl3SqpbPSM+dkQyJgWcSdDiadWnzzJsFBxv76ppvajNcyN4AeuO9P8g==",
                            PhoneNumber = "65325334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f092dedc-464b-4f2e-bcc4-2c89f4705a15",
                            TwoFactorEnabled = false,
                            UserName = "tommyjones@employee.com"
                        },
                        new
                        {
                            Id = "63929151-0e12-4c5c-a03c-01c34642856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1aac4b2a-591a-46bc-959e-267a034a2c8a",
                            Designation = "Safety Inspector",
                            Email = "elizaross@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1140,
                            FirstName = "Eliza",
                            LastName = "Ross",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZAROSS@EMPLOYEE.COM",
                            NormalizedUserName = "ELIZAROSS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqGno3dXU0lyau9RJrMuq9k8LPp513k0WZRl/11uqQmyz9f/SqIdXv3KEob/+0sXw==",
                            PhoneNumber = "67780373",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07d77504-20c4-4526-a80b-09e15abdc184",
                            TwoFactorEnabled = false,
                            UserName = "elizaross@employee.com"
                        },
                        new
                        {
                            Id = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c7c56d3-7c5f-43ef-abd4-c68a237b98bb",
                            Designation = "Safety Manager",
                            Email = "benjaminscott@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1794,
                            FirstName = "Benjamin",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJAMINSCOTT@MANAGER.COM",
                            NormalizedUserName = "BENJAMINSCOTT@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECkBFGerXpm00qBauploFVGXyQlUzr3vnWDonlOg0txupVJvoGVUBeA1tyZ8a0/Uug==",
                            PhoneNumber = "62610071",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "631ef938-ba38-4864-8eb2-ab115b6796da",
                            TwoFactorEnabled = false,
                            UserName = "benjaminscott@manager.com"
                        },
                        new
                        {
                            Id = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36af34e6-10be-427f-b07d-176ec1eb8fa8",
                            Designation = "Safety Inspector",
                            Email = "kylethomas@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1426,
                            FirstName = "Kyle",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLETHOMAS@EMPLOYEE.COM",
                            NormalizedUserName = "KYLETHOMAS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2nMAO94obRaRi2qfLS7muM1twLI5LKhILcx3abzk9WwXbEAVzWdKY1K7fMEzTfqg==",
                            PhoneNumber = "67361183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e585365b-56e3-4335-aacd-a7904ae203bb",
                            TwoFactorEnabled = false,
                            UserName = "kylethomas@employee.com"
                        },
                        new
                        {
                            Id = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a96db0c1-bddd-4f57-8e57-e2e2c6f4ffe9",
                            Designation = "Safety Inspector",
                            Email = "maddietay@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1224,
                            FirstName = "Maddie",
                            LastName = "Tay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADDIETAY@EMPLOYEE.COM",
                            NormalizedUserName = "MADDIETAY@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEESVLeyHud7LDMUj/kxrSCzH0Do3DvHPmqirtg8TNCz9IrBp+jhHtZcJZobZ0h0beg==",
                            PhoneNumber = "63457266",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0194901-329a-454d-a57d-5000a131748e",
                            TwoFactorEnabled = false,
                            UserName = "maddietay@employee.com"
                        },
                        new
                        {
                            Id = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc02690b-4208-4a3e-b5dc-c01ca916ec09",
                            Designation = "Safety Inspector",
                            Email = "larryparker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2144,
                            FirstName = "Larry",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRYPARKER@EMPLOYEE.COM",
                            NormalizedUserName = "LARRYPARKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOAJK5NRc1wupoD61DeguX41PkMKOQsnUMALrkoOkIeClBMypR2+uOojltEpYnTAA==",
                            PhoneNumber = "67771504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af6fc443-dbb5-4f99-bd06-bcc93e007594",
                            TwoFactorEnabled = false,
                            UserName = "larryparker@employee.com"
                        },
                        new
                        {
                            Id = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4119f15e-fd1e-4a0c-a813-b88cd203783f",
                            Designation = "Safety Manager",
                            Email = "emilybrown@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1061,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYBROWN@MANAGER.COM",
                            NormalizedUserName = "EMILYBROWN@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzYh7dYXhdPVcVldswsbOGwQbLqWv85i0ZLi7WRS7/wxotoJmFQCG5NHoeGaMME5w==",
                            PhoneNumber = "67528856",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89b709ee-7fe0-45f3-8d21-09fcae86740d",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown@manager.com"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleInjury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkActivityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkActivityId");

                    b.ToTable("Identifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            Name = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            PossibleInjury = "Bodily Injuries"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Name = "Falling ceiling board and and lights holding",
                            PossibleInjury = "Head & Bodily Injuries"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Name = "Contact with electrical parts and faulty cables with live exposed wires",
                            PossibleInjury = "Electrocution"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            Name = "Contact with hot surface / soldering iron",
                            PossibleInjury = "Burns to exposed skin"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 3,
                            Name = "Piercing by soldering iron tip",
                            PossibleInjury = "Minor Cuts"
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 3,
                            Name = "Inhaling fumes from soldering",
                            PossibleInjury = "Eye, nose and throat irritation"
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 4,
                            Name = "Contact with sharp edges and pointed tips",
                            PossibleInjury = "Injury to exposed skin/hand"
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 4,
                            Name = "Trip and fall due to hand tools/equipment on the floor",
                            PossibleInjury = "Head & Bodily Injuries"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskTeamId");

                    b.ToTable("RiskAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2024, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedStatus = true,
                            Approver = "John Smith",
                            AssessmentDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Temasek Poly (ENG)",
                            LastReviewDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "EN10-2-15",
                            Name = "CEN MP Risk Assessment",
                            NextReviewDate = new DateTime(2027, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Process = "CEN MP - April 2024",
                            TeamId = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ImplementingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId");

                    b.ToTable("RiskControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalControls = "All electrical appliances have proper electrical insulation.",
                            DueDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationId = 5,
                            ImplementingPerson = "David Young",
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExistingRiskControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HazardId")
                        .HasColumnType("int");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("RiskEvaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExistingRiskControls = "Loose network / power extension cables on the floor are taped",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 2,
                            ExistingRiskControls = "Visual check of the lab for any damages floor tiles and report to EFM @ 67805955 for repair and temporary taped up the damaged floor tiles",
                            HazardId = 1,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 3,
                            ExistingRiskControls = "Get cleaner to mop the floor, report to EFM @ 67805955",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 4,
                            ExistingRiskControls = "Visual check of the lab for any damages and report to EFM @ 67805955 for repair",
                            HazardId = 2,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 5,
                            ExistingRiskControls = "Do not touch electrical appliances with wet hands",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 6,
                            ExistingRiskControls = "Ensure there is no frayed or exposed wiring, report EFM @ 67805955 or Staff-in-charge immediately",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 7,
                            ExistingRiskControls = "Switch off the power when plugging/unplugging the power plug from the wall socket",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 8,
                            ExistingRiskControls = "Conduct briefing on proper use of soldering iron prior to first-time use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 9,
                            ExistingRiskControls = "Remain focused on the soldering task and not engage in conversation.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 10,
                            ExistingRiskControls = "Soldering iron must be returned to is holder and be placed in its holder when not in use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 11,
                            ExistingRiskControls = "Return soldering iron to stand after use",
                            HazardId = 5,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 12,
                            ExistingRiskControls = "Avoid the “head-bent-over-project” soldering posture.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 13,
                            ExistingRiskControls = "Ensure adequate ventilation in the lab when soldering.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 14,
                            ExistingRiskControls = "Using of solder fume extractor.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 15,
                            ExistingRiskControls = "Adopt safe working practices when handling sharp tools.",
                            HazardId = 7,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 16,
                            ExistingRiskControls = "Ensure all unused equipment/tools are kept properly when not in use or when away.",
                            HazardId = 8,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Eliza Ross",
                            Member1 = "Nina Choo",
                            Member2 = "Maddie Tay",
                            Member3 = "Stanley Hall",
                            Member4 = "Warren Young",
                            Member5 = "Jake Howard"
                        },
                        new
                        {
                            Id = 2,
                            Leader = "Kyle Thomas",
                            Member1 = "Constance Lee",
                            Member2 = "Bobby Brooks"
                        },
                        new
                        {
                            Id = 3,
                            Leader = "Tommy Jones",
                            Member1 = "Elena Reed",
                            Member2 = "Ben Danis",
                            Member3 = "Larry Parker",
                            Member4 = "Jimmy Baker"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("WorkActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentId = 1,
                            Name = "Use of MP facility"
                        },
                        new
                        {
                            Id = 2,
                            AssessmentId = 1,
                            Name = "Use of BYOD Notebooks, PCs, Equipment"
                        },
                        new
                        {
                            Id = 3,
                            AssessmentId = 1,
                            Name = "Use of soldering iron in MP labs for hardware related projects"
                        },
                        new
                        {
                            Id = 4,
                            AssessmentId = 1,
                            Name = "Handling of hand tools in MP Labs for hardware related projects"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.WorkActivity", "WorkActivity")
                        .WithMany("Identifications")
                        .HasForeignKey("WorkActivityId");

                    b.Navigation("WorkActivity");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskTeam", "RiskTeam")
                        .WithMany()
                        .HasForeignKey("RiskTeamId");

                    b.Navigation("RiskTeam");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskEvaluation", "RiskEvaluation")
                        .WithMany()
                        .HasForeignKey("RiskEvaluationId");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Identification", "Hazard")
                        .WithMany("RiskEvaluations")
                        .HasForeignKey("HazardId");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskAssessment", "RiskAssessment")
                        .WithMany("WorkActivities")
                        .HasForeignKey("RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.Navigation("RiskEvaluations");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Navigation("WorkActivities");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.Navigation("Identifications");
                });
#pragma warning restore 612, 618
        }
    }
}
