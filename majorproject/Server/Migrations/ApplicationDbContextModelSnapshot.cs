// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using majorproject.Server.Data;

#nullable disable

namespace majorproject.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce6c922d-a075-41ba-928b-ab718da843f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b61949be-76be-449f-bc66-535bddbf7b90",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a7b95d75-9c36-45cf-993f-504090b554cc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            RoleId = "ce6c922d-a075-41ba-928b-ab718da843f4"
                        },
                        new
                        {
                            UserId = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e7b4016a-fa59-4669-969f-36601182f51c",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "63929151-0e12-4c5c-a03c-01c34642856a",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("majorproject.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2912ef02-3ebd-4495-8675-9f57152a6a62",
                            Designation = "IT Manager",
                            Email = "janedoe@admin.com",
                            EmailConfirmed = false,
                            EmployeeID = 1003,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@ADMIN.COM",
                            NormalizedUserName = "JANEDOE@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuOnr/Z6mSivJGC8I2gRfd7CscrBR3VHiwWVYft5XwSHU4ObKjkpy2HBRRVW0IU/g==",
                            PhoneNumber = "64841415",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10eb4527-879a-4c6e-b56c-01e2916a5e11",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@admin.com"
                        },
                        new
                        {
                            Id = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aa9738e-de6e-442a-89cb-a308cd695566",
                            Designation = "Safety Manager",
                            Email = "johnsmith@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 2010,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@MANAGER.COM",
                            NormalizedUserName = "JOHNSMITH@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECuGHr7pe6jP3pidJe4fzGEtDt1bFWIuzrXXiQbqCVIkqGJMAKuux9dPIGkLsLLDFQ==",
                            PhoneNumber = "67349033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c98ba6e-a978-4b44-a020-8d9b751daf30",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@manager.com"
                        },
                        new
                        {
                            Id = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59740058-b6d0-4def-9626-b11cbcfe66fb",
                            Designation = "Safety Inspector",
                            Email = "stanleyhall@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1243,
                            FirstName = "Stanley",
                            LastName = "Hall",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYHALL@EMPLOYEE.COM",
                            NormalizedUserName = "STANLEYHALL@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELhECu0XJaZomfntAA55k7VVD0jxizaxIZTlr47JKnJoa8Pg8gYuCOqp/eIWgAdhLg==",
                            PhoneNumber = "63960815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98003874-7b06-48de-ac4f-78194d2d8631",
                            TwoFactorEnabled = false,
                            UserName = "stanleyhall@employee.com"
                        },
                        new
                        {
                            Id = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4260808-3270-4a56-b158-593dd5a89321",
                            Designation = "Safety Inspector",
                            Email = "elenareed@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1953,
                            FirstName = "Elena",
                            LastName = "Reed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENAREED@EMPLOYEE.COM",
                            NormalizedUserName = "ELENAREED@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsDAjjYIY2zH8DdhQ8eFrV6/ew/2Op+oP1fdY9OCLz+QazgEw6LU0ZtOj/MwovFRQ==",
                            PhoneNumber = "63450508",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0aa71c-cee0-4306-a801-fc61c195187c",
                            TwoFactorEnabled = false,
                            UserName = "elenareed@employee.com"
                        },
                        new
                        {
                            Id = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f249c4f-8504-484b-b94e-029facb6768f",
                            Designation = "Safety Inspector",
                            Email = "warrenyoung@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1331,
                            FirstName = "Warren",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARRENYOUNG@EMPLOYEE.COM",
                            NormalizedUserName = "WARRENYOUNG@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAugus3a2fT9zdDTshkuABR9QlObYDurLw8Dvgg/C9GiRMkemJjRdz7uZ+7XRKmyIA==",
                            PhoneNumber = "63388585",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27aa1256-2453-4853-8b46-6dfe50ceb5bf",
                            TwoFactorEnabled = false,
                            UserName = "warrenyoung@employee.com"
                        },
                        new
                        {
                            Id = "e7b4016a-fa59-4669-969f-36601182f51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c9b3313-3945-4c65-9b8a-5d2aa051a242",
                            Designation = "Safety Manager",
                            Email = "kevinjones@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1991,
                            FirstName = "Kevin",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVINJONES@MANAGER.COM",
                            NormalizedUserName = "KEVINJONES@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELg4qpRLHi4XEMWHquegifSF1XiMmmDwNfXdPNooPJiruvDvI0PdV4h+qzmgim7LUQ==",
                            PhoneNumber = "68999888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6885d61e-bbea-4205-95ac-9a1d412cea3c",
                            TwoFactorEnabled = false,
                            UserName = "kevinjones@manager.com"
                        },
                        new
                        {
                            Id = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d29ba092-0018-447d-98f6-fd925568887f",
                            Designation = "Safety Inspector",
                            Email = "bobbybrooks@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1507,
                            FirstName = "Bobby",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBYBROOKS@EMPLOYEE.COM",
                            NormalizedUserName = "BOBBYBROOKS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEDqi2AuyBClkuBgkriU3Su4mYujhKuXsLda/WTQsX+E0WBTAUqo8iVR9UkLcXE4g==",
                            PhoneNumber = "62570046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64658782-ab94-43fe-ac9a-f79019a6bf72",
                            TwoFactorEnabled = false,
                            UserName = "bobbybrooks@employee.com"
                        },
                        new
                        {
                            Id = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a16c8725-e016-48ff-857f-b2ad753540d3",
                            Designation = "Safety Manager",
                            Email = "jennielow@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1748,
                            FirstName = "Jennie",
                            LastName = "Low",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIELOW@MANAGER.COM",
                            NormalizedUserName = "JENNIELOW@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHA8JfO15hdts31EzoL+O0XUVcV2oukLZhlodqskQFXjMxEtHCsJ50NKf2q8Aq9c/A==",
                            PhoneNumber = "62247473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "781f6471-a470-48f9-81f0-750eadb478b7",
                            TwoFactorEnabled = false,
                            UserName = "jennielow@manager.com"
                        },
                        new
                        {
                            Id = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d572ecfa-ff8c-49aa-8870-401aba99da2a",
                            Designation = "Safety Inspector",
                            Email = "constancelee@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1483,
                            FirstName = "Constance",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCELEE@EMPLOYEE.COM",
                            NormalizedUserName = "CONSTANCELEE@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKlXgsgSfvonoWdrMnZbFVkh8IO5f194fgJe+pCB72ce+KJ9XK5+lKZzlGfDbPohA==",
                            PhoneNumber = "67457717",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9809a003-f9b1-43a7-9744-78923d08cfad",
                            TwoFactorEnabled = false,
                            UserName = "constancelee@employee.com"
                        },
                        new
                        {
                            Id = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2b27d5d-9623-4af6-a254-d781dfb4cc8a",
                            Designation = "Safety Inspector",
                            Email = "bendanis@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2024,
                            FirstName = "Ben",
                            LastName = "Danis",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENDANIS@EMPLOYEE.COM",
                            NormalizedUserName = "BENDANIS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6ZgzAa98+58cwbY2pxRVVTAKGHFoIJmiZz+VQrCsFx8JNGbMj3b11sWzJ9cKRXog==",
                            PhoneNumber = "68626846",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3449a323-4a2d-444f-ae54-42fd746356d2",
                            TwoFactorEnabled = false,
                            UserName = "bendanis@employee.com"
                        },
                        new
                        {
                            Id = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "411cbbb7-ba92-4163-8fc1-86e810b2da02",
                            Designation = "Safety Inspector",
                            Email = "jimmybaker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2156,
                            FirstName = "Jimmy",
                            LastName = "Baker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIMMYBAKER@EMPLOYEE.COM",
                            NormalizedUserName = "JIMMYBAKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/tRxQuwfjDfNxSD6/8aEiZyUSz/AWT6fADNJGjmmQh/PK6wFcj1RFdMtOHViMxhA==",
                            PhoneNumber = "67789981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "900e1d06-4012-4cd1-b8d0-5228372fdfc3",
                            TwoFactorEnabled = false,
                            UserName = "jimmybaker@employee.com"
                        },
                        new
                        {
                            Id = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "780b8dc9-521a-401c-a23b-65fb409f6693",
                            Designation = "Safety Inspector",
                            Email = "jakehoward@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1397,
                            FirstName = "Jake",
                            LastName = "Howard",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKEHOWARD@EMPLOYEE.COM",
                            NormalizedUserName = "JAKEHOWARD@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7Mn0yxuOCfJCHJyj1fdQ9xeBSOnotTO3QDTA6OrQinf7aCnIL+BtZkf3gg42sa6g==",
                            PhoneNumber = "62678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90ab84a2-c488-47c0-91f4-e399a68d0094",
                            TwoFactorEnabled = false,
                            UserName = "jakehoward@employee.com"
                        },
                        new
                        {
                            Id = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "110e6852-76d3-45b5-9643-0cd5cff04bd2",
                            Designation = "Safety Inspector",
                            Email = "ninachoo@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1170,
                            FirstName = "Nina",
                            LastName = "Choo",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINACHOO@EMPLOYEE.COM",
                            NormalizedUserName = "NINACHOO@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+cbIppgWVktStgSVTmzcFa8BOnJ8kgXUcXjpvx+BT4d5ZUUVoxSsvBZuBOkPPo1A==",
                            PhoneNumber = "65366623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37d317c6-94dc-4b1c-a63d-5aec949e9a3a",
                            TwoFactorEnabled = false,
                            UserName = "ninachoo@employee.com"
                        },
                        new
                        {
                            Id = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d4f69a7-1d18-4b43-84e8-ca81e942aa73",
                            Designation = "Safety Inspector",
                            Email = "tommyjones@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1886,
                            FirstName = "Tommy",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMMYJONES@EMPLOYEE.COM",
                            NormalizedUserName = "TOMMYJONES@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHxccihyPcnNCGx414Z5jJAeJnhcp36Av6VRL4v1DGs8lYMpO/4ooglXZcV6fcLvw==",
                            PhoneNumber = "65325334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5c643ef-9b87-4e4e-b6a1-9cdcc52ad702",
                            TwoFactorEnabled = false,
                            UserName = "tommyjones@employee.com"
                        },
                        new
                        {
                            Id = "63929151-0e12-4c5c-a03c-01c34642856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9079871-d294-4fed-8231-37b7749c74e0",
                            Designation = "Safety Inspector",
                            Email = "elizaross@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1140,
                            FirstName = "Eliza",
                            LastName = "Ross",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZAROSS@EMPLOYEE.COM",
                            NormalizedUserName = "ELIZAROSS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIn88KcmPBO0qFQBHhNumn1LmlYLtrJ38x/kMDZSP0BgR+2SS5G6IoVRRvxv3cye/w==",
                            PhoneNumber = "67780373",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04db5162-8864-4470-98ef-a1f04f587886",
                            TwoFactorEnabled = false,
                            UserName = "elizaross@employee.com"
                        },
                        new
                        {
                            Id = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf1de03e-91a6-4110-bb39-be84db34618f",
                            Designation = "Safety Manager",
                            Email = "benjaminscott@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1794,
                            FirstName = "Benjamin",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJAMINSCOTT@MANAGER.COM",
                            NormalizedUserName = "BENJAMINSCOTT@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCV60dT2fBeadx1qRgC6Y9GrytDHzjocwjRA3Rm4KxeNhl0ohoIH7xQz4ZvoKBR7A==",
                            PhoneNumber = "62610071",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "474177a7-3e96-43f2-981a-38a9ac259492",
                            TwoFactorEnabled = false,
                            UserName = "benjaminscott@manager.com"
                        },
                        new
                        {
                            Id = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5141e5a-9acd-4e55-a5db-4683d0349352",
                            Designation = "Safety Inspector",
                            Email = "kylethomas@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1426,
                            FirstName = "Kyle",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLETHOMAS@EMPLOYEE.COM",
                            NormalizedUserName = "KYLETHOMAS@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAO0JZuhmGpK65MZ5K6phnF0YSs/mnGgoAr1Xfw/7QRJfWZQRiJZryvgtZI6jqpLmw==",
                            PhoneNumber = "67361183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9270f64a-796f-4c01-a22c-543d2a927e76",
                            TwoFactorEnabled = false,
                            UserName = "kylethomas@employee.com"
                        },
                        new
                        {
                            Id = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bff520b8-219e-49e3-bcfb-7a206481e3d0",
                            Designation = "Safety Inspector",
                            Email = "maddietay@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 1224,
                            FirstName = "Maddie",
                            LastName = "Tay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADDIETAY@EMPLOYEE.COM",
                            NormalizedUserName = "MADDIETAY@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC9gl9wBKbNHbZUSom7JSkNu82rxmW5ELp2KQEwO2ugHuCjETWJnT5BEGwyfCxzB4A==",
                            PhoneNumber = "63457266",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d0b33de-5e3e-4cfb-97b6-8650dc764426",
                            TwoFactorEnabled = false,
                            UserName = "maddietay@employee.com"
                        },
                        new
                        {
                            Id = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4faf183-7a6f-4b45-9fc4-db6f595061fe",
                            Designation = "Safety Inspector",
                            Email = "larryparker@employee.com",
                            EmailConfirmed = false,
                            EmployeeID = 2144,
                            FirstName = "Larry",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRYPARKER@EMPLOYEE.COM",
                            NormalizedUserName = "LARRYPARKER@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMIOx6Y+X7jPVCo6cXkAFmCpxVVNRAAjpy0tyvHksJilEGI8cK/Cj8POBbbA5ZFsyA==",
                            PhoneNumber = "67771504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b2a9b13-c469-427b-8104-6944b7a8901b",
                            TwoFactorEnabled = false,
                            UserName = "larryparker@employee.com"
                        },
                        new
                        {
                            Id = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f4d9584-0a88-422b-b8bd-852cad2da3c5",
                            Designation = "Safety Manager",
                            Email = "emilybrown@manager.com",
                            EmailConfirmed = false,
                            EmployeeID = 1061,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYBROWN@MANAGER.COM",
                            NormalizedUserName = "EMILYBROWN@MANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFBDlgIGobEf9+gotmbOZP68eJxoyMiJugzKcbbg9zeZwdOzlF02eaJzWnzvda57Gg==",
                            PhoneNumber = "67528856",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a2c02b7-bffa-4e5d-8302-1df81284e15f",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown@manager.com"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleInjury")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Identifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            Name = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            PossibleInjury = "Bodily Injuries"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Name = "Falling ceiling board and and lights holding",
                            PossibleInjury = "Head & Bodily Injuries"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Name = "Contact with electrical parts and faulty cables with live exposed wires",
                            PossibleInjury = "Electrocution"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            Name = "Contact with hot surface / soldering iron",
                            PossibleInjury = "Burns to exposed skin"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 3,
                            Name = "Piercing by soldering iron tip",
                            PossibleInjury = "Minor Cuts"
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 3,
                            Name = "Inhaling fumes from soldering",
                            PossibleInjury = "Eye, nose and throat irritation"
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 4,
                            Name = "Contact with sharp edges and pointed tips",
                            PossibleInjury = "Injury to exposed skin/hand"
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 4,
                            Name = "Trip and fall due to hand tools/equipment on the floor",
                            PossibleInjury = "Head & Bodily Injuries"
                        },
                        new
                        {
                            Id = 9,
                            ActivityId = 5,
                            Name = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            PossibleInjury = "Bodily Injuries"
                        },
                        new
                        {
                            Id = 10,
                            ActivityId = 5,
                            Name = "Falling ceiling board and lights holding",
                            PossibleInjury = "Head & Bodily Injuries"
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 6,
                            Name = "Contact with electrical parts and faulty cables with live exposed wires",
                            PossibleInjury = "Electrocution"
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 7,
                            Name = "Heavy equipment falling to ground",
                            PossibleInjury = "Injury & bruises"
                        },
                        new
                        {
                            Id = 13,
                            ActivityId = 7,
                            Name = "Awkward working posture",
                            PossibleInjury = "Back injury"
                        },
                        new
                        {
                            Id = 14,
                            ActivityId = 7,
                            Name = "Electrical",
                            PossibleInjury = "Electrical shock, burns, electrocution"
                        },
                        new
                        {
                            Id = 15,
                            ActivityId = 8,
                            Name = "Contact with sharp edges",
                            PossibleInjury = "Minor cuts"
                        },
                        new
                        {
                            Id = 16,
                            ActivityId = 9,
                            Name = "Contact with hot surface",
                            PossibleInjury = "Skin burns"
                        },
                        new
                        {
                            Id = 17,
                            ActivityId = 9,
                            Name = "Pierced by soldering iron tip",
                            PossibleInjury = "Minor cuts"
                        },
                        new
                        {
                            Id = 18,
                            ActivityId = 9,
                            Name = "Inhalation of soldering fume",
                            PossibleInjury = "Respiratory Irritation from soldering fume"
                        },
                        new
                        {
                            Id = 19,
                            ActivityId = 9,
                            Name = "Ingesting lead dust on solder",
                            PossibleInjury = "Ill-heath effect from Lead poisoning"
                        },
                        new
                        {
                            Id = 20,
                            ActivityId = 10,
                            Name = "Heavy equipment fall to ground Physical-forceful exertions",
                            PossibleInjury = "Leg injury, Back and arm injuries"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.ImageSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Base64String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromptAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("ImageSources");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("RiskAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2024, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedStatus = true,
                            Approver = "John Smith",
                            AssessmentDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Temasek Poly (ENG)",
                            LastReviewDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "EN10-2-15",
                            Name = "CEN MP Risk Assessment",
                            NextReviewDate = new DateTime(2027, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Process = "CEN MP - April 2024",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 2,
                            ApprovalDate = new DateTime(2023, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedStatus = true,
                            Approver = "Benjamin Scott",
                            AssessmentDate = new DateTime(2018, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "School of Engineering",
                            LastReviewDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "EN15-06-051, EN15-06-052, EN15-06-053, EN15-06-055, EN15-06-057, EN15-06-058, EN16-03-35, EN16-03-42",
                            Name = "TP-ENG Laboratories Risk Assessment",
                            NextReviewDate = new DateTime(2026, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Process = "ELN/CEN/ABS/IFM/AEL/AEG//BME/IIT/MTN",
                            TeamId = 4
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalControls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ImplementingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId");

                    b.ToTable("RiskControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalControls = "All electrical appliances have proper water proofing.",
                            DueDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationId = 5,
                            ImplementingPerson = "David Young",
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 2,
                            AdditionalControls = "Conduct monthly checks on the electrical wiring.",
                            DueDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationId = 6,
                            ImplementingPerson = "David Young",
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExistingRiskControls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HazardId")
                        .HasColumnType("int");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("RiskEvaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExistingRiskControls = "Loose network / power extension cables on the floor are taped",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 2,
                            ExistingRiskControls = "Visual check of the lab for any damages floor tiles and report to EFM @ 67805955 for repair and temporary taped up the damaged floor tiles",
                            HazardId = 1,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 3,
                            ExistingRiskControls = "Get cleaner to mop the floor, report to EFM @ 67805955",
                            HazardId = 1,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 4,
                            ExistingRiskControls = "Visual check of the lab for any damages and report to EFM @ 67805955 for repair",
                            HazardId = 2,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 5,
                            ExistingRiskControls = "Do not touch electrical appliances with wet hands",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 6,
                            ExistingRiskControls = "Ensure there is no frayed or exposed wiring, report EFM @ 67805955 or Staff-in-charge immediately",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 7,
                            ExistingRiskControls = "Switch off the power when plugging/unplugging the power plug from the wall socket",
                            HazardId = 3,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 8,
                            ExistingRiskControls = "Conduct briefing on proper use of soldering iron prior to first-time use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 9,
                            ExistingRiskControls = "Remain focused on the soldering task and not engage in conversation.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 10,
                            ExistingRiskControls = "Soldering iron must be returned to is holder and be placed in its holder when not in use.",
                            HazardId = 4,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 11,
                            ExistingRiskControls = "Return soldering iron to stand after use",
                            HazardId = 5,
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        },
                        new
                        {
                            Id = 12,
                            ExistingRiskControls = "Avoid the “head-bent-over-project” soldering posture.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 13,
                            ExistingRiskControls = "Ensure adequate ventilation in the lab when soldering.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 14,
                            ExistingRiskControls = "Using of solder fume extractor.",
                            HazardId = 6,
                            Likelihood = 3,
                            RPN = 6,
                            Severity = 2
                        },
                        new
                        {
                            Id = 15,
                            ExistingRiskControls = "Adopt safe working practices when handling sharp tools.",
                            HazardId = 7,
                            Likelihood = 2,
                            RPN = 4,
                            Severity = 2
                        },
                        new
                        {
                            Id = 16,
                            ExistingRiskControls = "Ensure all unused equipment/tools are kept properly when not in use or when away.",
                            HazardId = 8,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 17,
                            ExistingRiskControls = "Loose network / power extension cables on the floor are taped.",
                            HazardId = 9,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 18,
                            ExistingRiskControls = "Visual check of the lab for any damages floor tiles and report to EFM @67805955 for repair and temporary taped up the damaged floor tiles.",
                            HazardId = 9,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 19,
                            ExistingRiskControls = "Get cleaner to mop the floor, report to EFM @ 67805955.",
                            HazardId = 9,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 20,
                            ExistingRiskControls = "Visual check of the lab for any damages and report to EFM @ 67805955 for repair.",
                            HazardId = 10,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 21,
                            ExistingRiskControls = "Alternative location for classes when the needs arise due to severity of situation.",
                            HazardId = 10,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 22,
                            ExistingRiskControls = "Do not touch electrical appliances with wet hands.",
                            HazardId = 11,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 23,
                            ExistingRiskControls = "Ensure there is no frayed or exposed wiring, report EFM @ 67805955 or Staff-in-charge immediately.",
                            HazardId = 11,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 24,
                            ExistingRiskControls = "Switch off the power when plugging/unplugging the power plug from the wall socket.",
                            HazardId = 11,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 25,
                            ExistingRiskControls = "Wear Safety Shoe.",
                            HazardId = 12,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 26,
                            ExistingRiskControls = "Use of trolley for carrying heavy items.",
                            HazardId = 12,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 27,
                            ExistingRiskControls = "Seek additional help if unable to handle the equipment.",
                            HazardId = 12,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 28,
                            ExistingRiskControls = "Always use leg muscles and keep back straight while lifting, adopt the correct lifting posture.",
                            HazardId = 13,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 29,
                            ExistingRiskControls = "Electrical ELCB are installed in the laboratory",
                            HazardId = 14,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 30,
                            ExistingRiskControls = "Power off and unplug the power from the equipment when not in use.",
                            HazardId = 14,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 31,
                            ExistingRiskControls = "Wear proper safety footwear.",
                            HazardId = 14,
                            Likelihood = 1,
                            RPN = 5,
                            Severity = 5
                        },
                        new
                        {
                            Id = 32,
                            ExistingRiskControls = "Proper handling (use of electronic tools)",
                            HazardId = 15,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 33,
                            ExistingRiskControls = "Switch off soldering iron after used",
                            HazardId = 16,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 34,
                            ExistingRiskControls = "Return iron to stand after used",
                            HazardId = 16,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 35,
                            ExistingRiskControls = "Return iron to stand after used.",
                            HazardId = 17,
                            Likelihood = 1,
                            RPN = 3,
                            Severity = 3
                        },
                        new
                        {
                            Id = 36,
                            ExistingRiskControls = "Laboratory to be well ventilated during soldering.",
                            HazardId = 18,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 37,
                            ExistingRiskControls = "Wash hands with soap immediately after soldering before going for meals.",
                            HazardId = 19,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 38,
                            ExistingRiskControls = "Safety briefing to staff on soldering safety if lead based solders are used.",
                            HazardId = 19,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 39,
                            ExistingRiskControls = "Consider using lead-free solder.",
                            HazardId = 19,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 40,
                            ExistingRiskControls = "Practice good housekeeping to remove soldering remnants on benches by sweeping and cleaning.",
                            HazardId = 19,
                            Likelihood = 1,
                            RPN = 4,
                            Severity = 4
                        },
                        new
                        {
                            Id = 41,
                            ExistingRiskControls = "Wear safety shoes",
                            HazardId = 20,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 42,
                            ExistingRiskControls = "Use trolley for transportation of equipment",
                            HazardId = 20,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        },
                        new
                        {
                            Id = 43,
                            ExistingRiskControls = "Limit weight stacked on trolley, trained on manual handling techniques",
                            HazardId = 20,
                            Likelihood = 2,
                            RPN = 6,
                            Severity = 3
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Eliza Ross",
                            Member1 = "Nina Choo",
                            Member2 = "Maddie Tay",
                            Member3 = "Stanley Hall",
                            Member4 = "Warren Young",
                            Member5 = "Jake Howard"
                        },
                        new
                        {
                            Id = 2,
                            Leader = "Kyle Thomas",
                            Member1 = "Constance Lee",
                            Member2 = "Bobby Brooks"
                        },
                        new
                        {
                            Id = 3,
                            Leader = "Tommy Jones",
                            Member1 = "Elena Reed",
                            Member2 = "Ben Danis",
                            Member3 = "Larry Parker",
                            Member4 = "Jimmy Baker"
                        },
                        new
                        {
                            Id = 4,
                            Leader = "Stanley Hall",
                            Member1 = "Jake Howard",
                            Member2 = "Constance Lee",
                            Member3 = "Tommy Jones"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("WorkActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentId = 1,
                            Name = "Use of MP facility"
                        },
                        new
                        {
                            Id = 2,
                            AssessmentId = 1,
                            Name = "Use of BYOD Notebooks, PCs, Equipment"
                        },
                        new
                        {
                            Id = 3,
                            AssessmentId = 1,
                            Name = "Use of soldering iron in MP labs for hardware related projects"
                        },
                        new
                        {
                            Id = 4,
                            AssessmentId = 1,
                            Name = "Handling of hand tools in MP Labs for hardware related projects"
                        },
                        new
                        {
                            Id = 5,
                            AssessmentId = 2,
                            Name = "Use of facility"
                        },
                        new
                        {
                            Id = 6,
                            AssessmentId = 2,
                            Name = "Use of PCs in Laboratory"
                        },
                        new
                        {
                            Id = 7,
                            AssessmentId = 2,
                            Name = "Maintenance and operation of lab equipment"
                        },
                        new
                        {
                            Id = 8,
                            AssessmentId = 2,
                            Name = "Handling component and lab materials"
                        },
                        new
                        {
                            Id = 9,
                            AssessmentId = 2,
                            Name = "Hand soldering"
                        },
                        new
                        {
                            Id = 10,
                            AssessmentId = 2,
                            Name = "Transportation of lab equipment"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.WorkActivity", "Activity")
                        .WithMany("Identifications")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.ImageSource", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskAssessment", "RiskAssessment")
                        .WithMany()
                        .HasForeignKey("RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskEvaluation", "RiskEvaluation")
                        .WithMany("Control")
                        .HasForeignKey("RiskEvaluationId");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Identification", "Hazard")
                        .WithMany("RiskEvaluations")
                        .HasForeignKey("HazardId");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskAssessment", "RiskAssessment")
                        .WithMany("WorkActivities")
                        .HasForeignKey("RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Identification", b =>
                {
                    b.Navigation("RiskEvaluations");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskAssessment", b =>
                {
                    b.Navigation("WorkActivities");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Navigation("Control");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.WorkActivity", b =>
                {
                    b.Navigation("Identifications");
                });
#pragma warning restore 612, 618
        }
    }
}
