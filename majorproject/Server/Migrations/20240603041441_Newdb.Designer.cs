// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using majorproject.Server.Data;

#nullable disable

namespace majorproject.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240603041441_Newdb")]
    partial class Newdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce6c922d-a075-41ba-928b-ab718da843f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b61949be-76be-449f-bc66-535bddbf7b90",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a7b95d75-9c36-45cf-993f-504090b554cc",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            RoleId = "ce6c922d-a075-41ba-928b-ab718da843f4"
                        },
                        new
                        {
                            UserId = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e7b4016a-fa59-4669-969f-36601182f51c",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "63929151-0e12-4c5c-a03c-01c34642856a",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        },
                        new
                        {
                            UserId = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            RoleId = "a7b95d75-9c36-45cf-993f-504090b554cc"
                        },
                        new
                        {
                            UserId = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            RoleId = "b61949be-76be-449f-bc66-535bddbf7b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("majorproject.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0923ec27-2dc5-46d5-a8a1-e48c70e69ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbaf49cd-0749-4f97-a801-3af2b65bd213",
                            Designation = "IT Manager",
                            Email = "janedoe@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1003,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@GMAIL.COM",
                            NormalizedUserName = "JANEDOE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNTG+z6dH7W/gogWRJ1K9GaFYOu7eyrCNyHuTuiItxcqRsj2IpUnLWulZZkrcp/WA==",
                            PhoneNumber = "64841415",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "697bc3fc-3311-4793-a913-d00ed615a663",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@gmail.com"
                        },
                        new
                        {
                            Id = "23cdf685-e508-4fc6-84cc-c860af2dd301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9cb1d3e-2c16-483f-82cd-647acc043dc1",
                            Designation = "Safety Manager",
                            Email = "johnsmith@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2010,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@GMAIL.COM",
                            NormalizedUserName = "JOHNSMITH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHfgLiaqDX4aEyh3ZvVQfg8Q62SZO8crN8Lpk56u9qoLEptvGFMYXSBRT71jKJyElQ==",
                            PhoneNumber = "67349033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "862d7a22-22fb-4571-9351-78a4240cb09f",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@gmail.com"
                        },
                        new
                        {
                            Id = "5859b058-1d6e-4b79-8040-9bbd204c0dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62f5455f-0b63-4e47-8ba6-8367195d75f3",
                            Designation = "Safety Inspector",
                            Email = "stanleyhall@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1243,
                            FirstName = "Stanley",
                            LastName = "Hall",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYHALL@GMAIL.COM",
                            NormalizedUserName = "STANLEYHALL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4hcAquE+XosOHq/j0x8NsnxMYMaoL4oT0N2oZ/Mv9yC2uFCVg/05HIKqNFebXEMw==",
                            PhoneNumber = "63960815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5371cac-4007-4a31-adb8-5616b7ed335b",
                            TwoFactorEnabled = false,
                            UserName = "stanleyhall@gmail.com"
                        },
                        new
                        {
                            Id = "f53bf9d9-95d1-42af-804e-e5edacdc9c74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0731eda5-8d94-4a75-9a57-c1ff7c9e25f7",
                            Designation = "Safety Inspector",
                            Email = "elenareed@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1953,
                            FirstName = "Elena",
                            LastName = "Reed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENAREED@GMAIL.COM",
                            NormalizedUserName = "ELENAREED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHLzeiSXJ79gwkRDUpG20PtTUgB2NeaNERAFhxID5IQUp5GDz3kJDFu2qtOORt737Q==",
                            PhoneNumber = "63450508",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "612e73d3-0146-48cf-bc70-5c3e9b82ce83",
                            TwoFactorEnabled = false,
                            UserName = "elenareed@gmail.com"
                        },
                        new
                        {
                            Id = "5258daf7-0bf7-4460-a854-4b3f427312c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45b9f8ff-9610-4b4a-a224-1bc7938cb1f8",
                            Designation = "Safety Inspector",
                            Email = "warrenyoung@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1331,
                            FirstName = "Warren",
                            LastName = "Young",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARRENYOUNG@GMAIL.COM",
                            NormalizedUserName = "WARRENYOUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBE8Etr7kNV8wilCcBlmeG2w0pqyDyrFX5d5y9mRyfnYm96sePZUhXm9Hev5tccumw==",
                            PhoneNumber = "63388585",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ee7779f-887e-4bbf-af82-463066ac5f07",
                            TwoFactorEnabled = false,
                            UserName = "warrenyoung@gmail.com"
                        },
                        new
                        {
                            Id = "e7b4016a-fa59-4669-969f-36601182f51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcbabbdc-5a18-4d97-baae-d74e34f20bb5",
                            Designation = "Safety Manager",
                            Email = "kevinjones@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1991,
                            FirstName = "Kevin",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVINJONES@GMAIL.COM",
                            NormalizedUserName = "KEVINJONES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvups3UeyY0l7dO93gVMExg8xxAvfl1QSwU1qULtojRS5SwF+i2r25QETaCZQwKXg==",
                            PhoneNumber = "68999888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04b6cbe8-ad91-4783-a6a0-0db3ea83a273",
                            TwoFactorEnabled = false,
                            UserName = "kevinjones@gmail.com"
                        },
                        new
                        {
                            Id = "cda313e3-33c1-4e6e-982b-3c5eb9ff9565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d75a914-e74d-482c-9d75-b41d27006a4c",
                            Designation = "Safety Inspector",
                            Email = "bobbybrooks@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1507,
                            FirstName = "Bobby",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBYBROOKS@GMAIL.COM",
                            NormalizedUserName = "BOBBYBROOKS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOL947pWoLq/fhyA9EbHZaEmCnmoMB0N3xZ9JBM5runiOdqWceUQAkDN28Bz/0Ch+A==",
                            PhoneNumber = "62570046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03ab37a5-b1ab-443c-bf49-96bb65ed8c7e",
                            TwoFactorEnabled = false,
                            UserName = "bobbybrooks@gmail.com"
                        },
                        new
                        {
                            Id = "8d06620d-3d31-4c1c-9449-7eaac032f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "792c33df-90b0-4b7d-bba2-c1476fd2ad90",
                            Designation = "Safety Manager",
                            Email = "jennielow@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1748,
                            FirstName = "Jennie",
                            LastName = "Low",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIELOW@GMAIL.COM",
                            NormalizedUserName = "JENNIELOW@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOO52TxUepEognYRN2G4hLPu8RRwu5cHKB4Aw2SQSXtY+OWPbLsuLB0mFQWjtiKt1Q==",
                            PhoneNumber = "62247473",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9dfd4029-158d-4367-b024-d16d57929168",
                            TwoFactorEnabled = false,
                            UserName = "jennielow@gmail.com"
                        },
                        new
                        {
                            Id = "77ea0c8c-fa62-4e13-980a-63ed5336f0b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64f58d4b-1911-4733-a3e2-66104fa2c1e7",
                            Designation = "Safety Inspector",
                            Email = "constancelee@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1483,
                            FirstName = "Constance",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCELEE@GMAIL.COM",
                            NormalizedUserName = "CONSTANCELEE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNQ22/KfKs3UvuPZtTlJ3lG4YDJC3QSqgV42mxUWE/tlNU4EuOIv2UrAbIph13gyQ==",
                            PhoneNumber = "67457717",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec339661-81b4-4f75-8add-d93f28eca9f4",
                            TwoFactorEnabled = false,
                            UserName = "constancelee@gmail.com"
                        },
                        new
                        {
                            Id = "d4d4ebdf-dfc1-4f10-98a9-ba0a3140d563",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4021901a-6dd6-4e8b-b4e4-6df689193398",
                            Designation = "Safety Inspector",
                            Email = "bendanis@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2024,
                            FirstName = "Ben",
                            LastName = "Danis",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENDANIS@GMAIL.COM",
                            NormalizedUserName = "BENDANIS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEB7a96lZsshrPS8ScrxZM2U+zPg3SAF6/UNWuAC4wtb39a6OE1Bw5hV791RoXWEMQ==",
                            PhoneNumber = "68626846",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd2c1585-3d2f-4903-8cdd-417e7a038775",
                            TwoFactorEnabled = false,
                            UserName = "bendanis@gmail.com"
                        },
                        new
                        {
                            Id = "b57e892b-0bdb-4469-afd9-e6522fea2f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71a9bc7f-1984-4c71-9a77-a86e9f17ecab",
                            Designation = "Safety Inspector",
                            Email = "jimmybaker@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2156,
                            FirstName = "Jimmy",
                            LastName = "Baker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIMMYBAKER@GMAIL.COM",
                            NormalizedUserName = "JIMMYBAKER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+AJLPkdZs4Sqg+6hRZ9qgxjDiRUdkpvosNsGeLkOiNOySyJa+0GGqe45Ed+hQIRw==",
                            PhoneNumber = "67789981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80639be4-4199-41ee-a3e6-58522a03da66",
                            TwoFactorEnabled = false,
                            UserName = "jimmybaker@gmail.com"
                        },
                        new
                        {
                            Id = "fe8964fa-aac1-4db1-97bb-017e0905242f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36f106eb-d759-4425-aa66-b3cd8329dde3",
                            Designation = "Safety Inspector",
                            Email = "jakehoward@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1397,
                            FirstName = "Jake",
                            LastName = "Howard",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKEHOWARD@GMAIL.COM",
                            NormalizedUserName = "JAKEHOWARD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/1GGy0zgiSdhxNq+z9efXhxYL+hJyKxUVSJ1vA83/+5UHrljfqTqctF5EE2Zdn3w==",
                            PhoneNumber = "62678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec9decae-45ba-4428-bf1b-889ff48ae456",
                            TwoFactorEnabled = false,
                            UserName = "jakehoward@gmail.com"
                        },
                        new
                        {
                            Id = "33a4bc04-9b10-49a5-8cb6-8dea48b122c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a134ea0b-8a47-426b-9aef-eb290a4c7afc",
                            Designation = "Safety Inspector",
                            Email = "ninachoo@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1170,
                            FirstName = "Nina",
                            LastName = "Choo",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINACHOO@GMAIL.COM",
                            NormalizedUserName = "NINACHOO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOg6Zjxt7GHcW1+GCFuW8t6HU88HVs91d4PxcrqM0LPSg1i8KVcJ8HZ0i64Eqwh7mA==",
                            PhoneNumber = "65366623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d820318-b806-4fe1-97b1-3f0d1315804f",
                            TwoFactorEnabled = false,
                            UserName = "ninachoo@gmail.com"
                        },
                        new
                        {
                            Id = "1519fcce-c355-4cad-8b22-01b76b762ffc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebeebdf0-92d2-47ee-b669-9c508f1a2b3e",
                            Designation = "Safety Inspector",
                            Email = "tommyjones@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1886,
                            FirstName = "Tommy",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMMYJONES@GMAIL.COM",
                            NormalizedUserName = "TOMMYJONES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECbbPEBWflLQC5ThUYTX+qnmTKlUgNeU6q/lFxaWxZ9eQU1Aq9mtU8H81bj9NTX5HQ==",
                            PhoneNumber = "65325334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80dfd901-74a3-4fe4-bf9d-c8beb175ec90",
                            TwoFactorEnabled = false,
                            UserName = "tommyjones@gmail.com"
                        },
                        new
                        {
                            Id = "63929151-0e12-4c5c-a03c-01c34642856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "422f4926-cc73-4927-9ac5-a29a63d659df",
                            Designation = "Safety Inspector",
                            Email = "elizaross@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1140,
                            FirstName = "Eliza",
                            LastName = "Ross",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZAROSS@GMAIL.COM",
                            NormalizedUserName = "ELIZAROSS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHahBeA94fvegw1PlQuVaFIiRswZGaVc2RIoqiPUwX7eg7ey4V5FdCjW4w7JnGuB4A==",
                            PhoneNumber = "67780373",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61376544-bb43-41cf-bb63-87836afe0ed7",
                            TwoFactorEnabled = false,
                            UserName = "elizaross@gmail.com"
                        },
                        new
                        {
                            Id = "2b94ec41-0ab6-4151-8a0f-3aeb25608ea5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f66a6993-9b08-49bc-aebb-48735097762f",
                            Designation = "Safety Manager",
                            Email = "benjaminscott@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1794,
                            FirstName = "Benjamin",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJAMINSCOTT@GMAIL.COM",
                            NormalizedUserName = "BENJAMINSCOTT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ5x4RBNLzRB4fOJaJYzJrry/sh8pyOFpj8nIkS9eoTTqaqfbdy2Jkh0gRipVm6SLw==",
                            PhoneNumber = "62610071",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e699a62f-9fc0-4ecb-bb50-d4c645b3e104",
                            TwoFactorEnabled = false,
                            UserName = "benjaminscott@gmail.com"
                        },
                        new
                        {
                            Id = "5fe7b4d7-7dd2-4667-b1a0-8d9200a15b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dccb11b2-0130-4556-946e-44662fac7cfd",
                            Designation = "Safety Inspector",
                            Email = "kylethomas@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1426,
                            FirstName = "Kyle",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLETHOMAS@GMAIL.COM",
                            NormalizedUserName = "KYLETHOMAS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDN1iOxzB54yOGmOYDv5bZpUj4jVy4UcheBeiRxr+yGMy5yRM8oM5TOfWDmwYaWL8g==",
                            PhoneNumber = "67361183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7190af5b-93d9-473d-afbc-4eb395ef533d",
                            TwoFactorEnabled = false,
                            UserName = "kylethomas@gmail.com"
                        },
                        new
                        {
                            Id = "e5e8acfe-c59a-4b4d-bba4-d40057aecef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c5d88bb-2d80-4b40-b4b0-b4935602c94c",
                            Designation = "Safety Inspector",
                            Email = "maddietay@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1224,
                            FirstName = "Maddie",
                            LastName = "Tay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADDIETAY@GMAIL.COM",
                            NormalizedUserName = "MADDIETAY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEDsVAmkCkZ9rfkAk02+nfbX6QL0zT/8w2wd/V5ZNDosco+1/NZVY02YsW4T2rawzA==",
                            PhoneNumber = "63457266",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cba96148-ff82-4aa6-9d58-671d0b343609",
                            TwoFactorEnabled = false,
                            UserName = "maddietay@gmail.com"
                        },
                        new
                        {
                            Id = "6f84b324-5cc8-48b6-a348-57c74b3d5294",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3028d1d0-200d-4f48-927d-ee71c89d785d",
                            Designation = "Safety Inspector",
                            Email = "larryparker@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 2144,
                            FirstName = "Larry",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRYPARKER@GMAIL.COM",
                            NormalizedUserName = "LARRYPARKER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaZMK+BSOUdW1QQahRU4np7NWcz0QkHIFGRloJe1ZeUHKwWMwfRwV7sH2yOBUa3Eg==",
                            PhoneNumber = "67771504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c6fc6dd-fd98-4382-918a-0f2dceca6930",
                            TwoFactorEnabled = false,
                            UserName = "larryparker@gmail.com"
                        },
                        new
                        {
                            Id = "911dd5ac-5093-444e-bd8d-b6fed36dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4b8f1a1-d748-4a92-9eeb-188c6f1f80da",
                            Designation = "Safety Manager",
                            Email = "emilybrown@gmail.com",
                            EmailConfirmed = false,
                            EmployeeID = 1061,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYBROWN@GMAIL.COM",
                            NormalizedUserName = "EMILYBROWN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMolQ7qmqqdbaP1FgTZ/bSF+aiACtVnMvoe/7lttk16kCWg1hl1SuKJfwfRYw9XIhw==",
                            PhoneNumber = "67528856",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fc197cd-beb6-470f-a470-b680ecb40293",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown@gmail.com"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("RAFId")
                        .HasColumnType("int");

                    b.Property<string>("WorkActivity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RAFId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WorkActivity = "Use of MP facility (Lab) (Reference: ENG-TWSH-TS01-RA001)"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Approval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfApproval")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RAFId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RAFId");

                    b.ToTable("Approvals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            DateOfApproval = new DateTime(2024, 6, 3, 12, 14, 38, 412, DateTimeKind.Local).AddTicks(1100),
                            Name = "tom"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("HazardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleInjury")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Hazards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HazardName = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            PossibleInjury = "Bodily Injuries"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RAF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RAFs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentDate = new DateTime(2024, 6, 3, 12, 14, 38, 412, DateTimeKind.Local).AddTicks(1944),
                            Department = "TP Staff",
                            LastReviewDate = new DateTime(2024, 6, 3, 12, 14, 38, 412, DateTimeKind.Local).AddTicks(1945),
                            Location = "EN10-2-15",
                            NextReviewDate = new DateTime(2024, 6, 3, 12, 14, 38, 412, DateTimeKind.Local).AddTicks(1946),
                            Process = "CEN MP - April 2024"
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddControl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImplementingPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskEId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId");

                    b.ToTable("RiskControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddControl = "",
                            DueDate = new DateTime(2024, 6, 3, 12, 14, 38, 412, DateTimeKind.Local).AddTicks(630),
                            ImplementingPerson = "",
                            Likelihood = 0,
                            RPN = 0,
                            Remarks = "",
                            Severity = 0
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExistingRiskControls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HazardId")
                        .HasColumnType("int");

                    b.Property<int?>("Likelihood")
                        .HasColumnType("int");

                    b.Property<int?>("RPN")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("RiskEvaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExistingRiskControls = "Trip and fall due to loose network and power extension cables, damaged floor tiles and wet floor",
                            Likelihood = 1,
                            RPN = 2,
                            Severity = 2
                        });
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberFive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RAFId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RAFId");

                    b.ToTable("RiskTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Mr Tan Cheng Khoon",
                            MemberFive = "",
                            MemberFour = "",
                            MemberOne = "Chai Zhuo Lym Ryan",
                            MemberThree = "Lim Yee Zhe",
                            MemberTwo = "Peh Jun Jie"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("majorproject.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Activity", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RAF", "RAF")
                        .WithMany()
                        .HasForeignKey("RAFId");

                    b.Navigation("RAF");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Approval", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RAF", "RAF")
                        .WithMany()
                        .HasForeignKey("RAFId");

                    b.Navigation("RAF");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.Hazard", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskControl", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RiskEvaluation", "RiskEvaluation")
                        .WithMany()
                        .HasForeignKey("RiskEvaluationId");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskEvaluation", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("majorproject.Shared.Domain.RiskTeam", b =>
                {
                    b.HasOne("majorproject.Shared.Domain.RAF", "RAF")
                        .WithMany()
                        .HasForeignKey("RAFId");

                    b.Navigation("RAF");
                });
#pragma warning restore 612, 618
        }
    }
}
