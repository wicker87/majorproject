@using Microsoft.AspNetCore.Identity
@using majorproject.Server.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var returnUrl = "/";
    if (Context.Request.Query.TryGetValue("returnUrl", out var existingUrl))
    {
        returnUrl = existingUrl;
    }

    // added
    ApplicationUser user = null;
    IList<string> roles = new List<string>();
    if (SignInManager.IsSignedIn(User))
    {
        user = await UserManager.GetUserAsync(User);
        roles = await UserManager.GetRolesAsync(user);
    }
}

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Welcome, @User.Identity?.Name</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">
                @user?.FirstName @user?.LastName
                @if (roles.Any())
                {
                    <span>(@string.Join(", ", roles))</span>
                }
            </a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="/" method="post">
                <button type="submit" class="btn btn-primary">Logout</button>
            </form>
        </li>
    }
    else
    {
        @* <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register" asp-route-returnUrl="@returnUrl">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@returnUrl">Login</a>
        </li> *@
    }
</ul>
