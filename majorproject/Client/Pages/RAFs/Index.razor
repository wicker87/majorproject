@page "/rafs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor 
@implements IDisposable 

<h3 class="card-title">Rafs Data</h3>

<br />

<a href="/rafs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Raf
</a>
<br />
<br />

@if (Rafs == null)
{
    <div class="alert alert-info">Loading Rafs Data...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Id</th>
                <th>Department</th>
                <th>Process</th>
                <th>Location</th>
                <th>Assessment Date</th>
                <th>Last Review Date</th>
                <th>Next Review Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var raf in Rafs)
            {
                <tr>
                    <td>@raf.Id</td>
                    <td>@raf.Department</td>
                    <td>@raf.Process</td>
                    <td>@raf.Location</td>
                    <td>@raf.AssessmentDate.ToString("dd/MM/yyyy")</td>
                    <td>@raf.LastReviewDate.ToString("dd/MM/yyyy")</td>
                    <td>@raf.NextReviewDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <a href="/rafs/edit/@raf.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <a href="/rafs/view/@raf.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(raf.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RAF>? Rafs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Rafs = await _client.GetFromJsonAsync<List<RAF>>($"{Endpoints.RAFsEndpoint}");
    }

    async Task Delete(int rafId)
    {
        if (Rafs != null)
        {
            var raf = Rafs.First(q => q.Id == rafId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {raf.Process} form?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.RAFsEndpoint}/{rafId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}