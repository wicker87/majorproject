@page "/assessments/{assessmentId:int}/activities/manage"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js

<AssessmentNavMenu AssessmentId="@assessmentId" />
<h3 class="card-title">Manage Work Activities</h3>
<hr />
<div style="display: flex; gap: 80px">
    <div>
        <button @onclick="GoBack" class="btn btn-secondary"><span class="oi oi-arrow-left"></span> Back</button>
    </div>
    <div>
        <button @onclick="CompleteActivities" class="btn btn-success btn-block">Next <span class="oi oi-arrow-right"></span></button>
    </div>
</div>
<br />

<FormComponent ButtonText="@formButtonText" activity="activity" OnValidSubmit="CreateOrUpdateActivity" OnCancelEdit="CancelEdit" />
<br />
<ol>
    @foreach (var act in activities)
    {
        <li>
            @act.Name
            <button @onclick="() => EditActivity(act)" class="btn btn-link text-warning">Edit</button>
            <button @onclick="() => DeleteActivity(act.Id, act.Name)" class="btn btn-link text-danger">Delete</button>
        </li>
    }
</ol>
<hr />

<div style="display: flex; gap: 80px">
    <div>
        <button @onclick="GoBack" class="btn btn-secondary"><span class="oi oi-arrow-left"></span> Back</button>
    </div>
    <div>
        <button @onclick="CompleteActivities" class="btn btn-success btn-block">Next <span class="oi oi-arrow-right"></span></button>
    </div>
</div>

@code {
    [Parameter] public int assessmentId { get; set; }

    private WorkActivity activity = new WorkActivity();
    private List<WorkActivity> activities = new List<WorkActivity>();
    private string formButtonText = "Create Activity";
    private bool Disabled = false;
    private WorkActivity originalActivity = null;

    protected override async Task OnInitializedAsync()
    {
        activity = new WorkActivity { AssessmentId = assessmentId };
        activities = await _client.GetFromJsonAsync<List<WorkActivity>>($"{Endpoints.WorkActivitiesEndpoint}/assessment/{assessmentId}");
    }

    private async Task CreateOrUpdateActivity()
    {
        if (activity.Id == 0) // Create new activity
        {
            var response = await _client.PostAsJsonAsync(Endpoints.WorkActivitiesEndpoint, activity);
            if (response.IsSuccessStatusCode)
            {
                var newActivity = await response.Content.ReadFromJsonAsync<WorkActivity>();
                activities.Add(newActivity);
                activity = new WorkActivity { AssessmentId = assessmentId }; // Reset the form for the next activity
                originalActivity = null;
            }
        }
        else // Update existing activity
        {
            var response = await _client.PutAsJsonAsync($"{Endpoints.WorkActivitiesEndpoint}/{activity.Id}", activity);
            if (response.IsSuccessStatusCode)
            {
                var index = activities.FindIndex(a => a.Id == activity.Id);
                if (index != -1)
                {
                    activities[index] = activity;
                }
                activity = new WorkActivity { AssessmentId = assessmentId }; // Reset the form
                formButtonText = "Create Activity";
                originalActivity = null;
            }
        }
    }

    private void EditActivity(WorkActivity act)
    {
        originalActivity = new WorkActivity
            {
                Id = act.Id,
                Name = act.Name,
                AssessmentId = act.AssessmentId
            };
        activity = act;
        formButtonText = "Update Activity";
    }

    private void CancelEdit()
    {
        if (originalActivity != null)
        {
            // Revert the changes by restoring the original activity state
            var index = activities.FindIndex(a => a.Id == originalActivity.Id);
            if (index != -1)
            {
                activities[index] = originalActivity;
            }
            originalActivity = null;
        }

        activity = new WorkActivity { AssessmentId = assessmentId };
        formButtonText = "Create Activity";
    }

    private async Task DeleteActivity(int activityId, string activityName)
    {
        await js.InvokeVoidAsync("alert", "Make sure to delete the hazard(s) related to this work activity.");

        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this work activity?\n{activityName}");
        if (confirm)
        {
            var response = await _client.DeleteAsync($"{Endpoints.WorkActivitiesEndpoint}/{activityId}");
            if (response.IsSuccessStatusCode)
            {
                activities = activities.Where(a => a.Id != activityId).ToList();
            }
        }
    }

    private void CompleteActivities()
    {
        _navManager.NavigateTo($"/assessments/{assessmentId}/hazards/manage"); 
    }

    private void GoBack()
    {
        _navManager.NavigateTo($"/assessments/{assessmentId}/edit");
    }
}
