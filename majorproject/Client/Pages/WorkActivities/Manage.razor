@page "/assessments/{assessmentId:int}/activities/manage"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js

<h3 class="card-title">Work Activities</h3>
<hr />
<h5>@formTitle</h5>
<br />

<div style="display: flex; gap: 10px;">
    <div>
        <FormComponent ButtonText="@formButtonText" activity="activity" OnValidSubmit="CreateOrUpdateActivity" />
    </div>
    <div>
        @if (formButtonText == "Update Activity")
        {
            <br />
            <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
        }
    </div>
</div>
<br />
<ol>
    @foreach (var act in activities)
    {
        <li>
            @act.Name
            <button @onclick="() => EditActivity(act)" class="btn btn text-warning">Edit</button>
            <button @onclick="() => DeleteActivity(act.Id, act.Name)" class="btn btn text-danger">Delete</button>
        </li>
    }
</ol>
<br />
<hr />
<button @onclick="CompleteActivities" class="btn btn-success btn-block">Update Activities</button>

@code {
    [Parameter] public int assessmentId { get; set; }

    private WorkActivity activity = new WorkActivity();
    private List<WorkActivity> activities = new List<WorkActivity>();
    private string formButtonText = "Create Activity";
    private string formTitle = "Add Work Activity";
    private bool Disabled = false;

    protected override async Task OnInitializedAsync()
    {
        activity = new WorkActivity { AssessmentId = assessmentId };
        activities = await _client.GetFromJsonAsync<List<WorkActivity>>($"{Endpoints.WorkActivitiesEndpoint}/assessment/{assessmentId}");
    }

    private async Task CreateOrUpdateActivity()
    {
        if (activity.Id == 0) // Create new activity
        {
            var response = await _client.PostAsJsonAsync(Endpoints.WorkActivitiesEndpoint, activity);
            if (response.IsSuccessStatusCode)
            {
                var newActivity = await response.Content.ReadFromJsonAsync<WorkActivity>();
                activities.Add(newActivity);
                activity = new WorkActivity { AssessmentId = assessmentId }; // Reset the form for the next activity
            }
        }
        else // Update existing activity
        {
            var response = await _client.PutAsJsonAsync($"{Endpoints.WorkActivitiesEndpoint}/{activity.Id}", activity);
            if (response.IsSuccessStatusCode)
            {
                var index = activities.FindIndex(a => a.Id == activity.Id);
                if (index != -1)
                {
                    activities[index] = activity;
                }
                activity = new WorkActivity { AssessmentId = assessmentId }; // Reset the form
                formButtonText = "Create Activity";
                formTitle = "Add Work Activity";
            }
        }
    }

    private void EditActivity(WorkActivity act)
    {
        activity = act;
        formButtonText = "Update Activity";
        formTitle = "Edit Work Activity";
    }

    private void CancelEdit()
    {
        activity = new WorkActivity { AssessmentId = assessmentId };
        formButtonText = "Create Activity";
        formTitle = "Add Work Activity";
    }

    private async Task DeleteActivity(int activityId, string activityName)
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {activityName}?");
        if (confirm)
        {
            var response = await _client.DeleteAsync($"{Endpoints.WorkActivitiesEndpoint}/{activityId}");
            if (response.IsSuccessStatusCode)
            {
                activities = activities.Where(a => a.Id != activityId).ToList();
            }
        }
    }

    private void CompleteActivities()
    {
        _navManager.NavigateTo($"/assessments/{assessmentId:int}/hazards/manage"); 
    }
}



