@page "/approvals/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor 
@implements IDisposable 

<h3 class="card-title">Approvals Data</h3>

<br />

<a href="/approvals/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Approval
</a>
<br />
<br />

@if (Approvals == null)
{
    <div class="alert alert-info">Loading Approvals Data...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Id</th>
                <th>Signature</th>
                <th>Manager</th>     
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var approval in Approvals)
            {
                <tr>
                    <td>@approval.Id</td>
                    @if (approval.Signature != null)
                    {
                        <img src="@($"data:image/jpeg;base64,{approval.Signature}")" width="80" height="80" />
                    }
                    else
                    {
                        <span>No signature</span>
                    }
                    <td>@approval.Manager.FullName</td>
                    <td>@approval.Date.ToString("dd/MM/yyyy")</td>
                    <td>
                        <a href="/approvals/edit/@approval.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <a href="/approvals/view/@approval.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(approval.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Approval>? Approvals;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Approvals = await _client.GetFromJsonAsync<List<Approval>>($"{Endpoints.ApprovalsEndpoint}");
    }

    async Task Delete(int approvalId)
    {
        if (Approvals != null)
        {
            var approval = Approvals.First(q => q.Id == approvalId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {approval.Manager.FullName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ApprovalsEndpoint}/{approvalId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}