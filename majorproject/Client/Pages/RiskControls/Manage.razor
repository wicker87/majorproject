@page "/evaluations/{evaluationId:int}/controls/manage"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js

<h3 class="card-title">Manage Risk Controls</h3>
<hr />
<br />

<h4><strong>Existing Risk Controls:</strong> </h4>
<FormComponent ButtonText="@formButtonText" control="@currentControl" OnValidSubmit="CreateOrUpdateControl" />
<br />
@if (formButtonText == "Update Control")
{
    <div>
        <button @onclick="() => DeleteControl(currentControl.Id)" class="btn btn-link text-danger">Delete</button>
    </div>
}
<hr />

<div style="display: flex; gap: 80px">
    <div>
        <button @onclick="GoBack" class="btn btn-secondary"><span class="oi oi-arrow-left"></span> Back</button>
    </div>
</div>

@code {
    [Parameter] public int assessmentId { get; set; }
    [Parameter] public int evaluationId { get; set; }

    private RiskControl currentControl = new RiskControl();
    private string formButtonText = "Create Control";

    protected override async Task OnInitializedAsync()
    {
        var response = await _client.GetAsync($"{Endpoints.RiskControlsEndpoint}/evaluation/{evaluationId}");
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            currentControl = new RiskControl { EvaluationId = evaluationId };
        }
        else
        {
            response.EnsureSuccessStatusCode(); // Throws an exception if the status code is not 2xx
            currentControl = await response.Content.ReadFromJsonAsync<RiskControl>();
            formButtonText = "Update Control";
        }
    }

    private async Task CreateOrUpdateControl()
    {
        if (currentControl.Id == 0) // Create new control
        {
            var response = await _client.PostAsJsonAsync(Endpoints.RiskControlsEndpoint, currentControl);
            if (response.IsSuccessStatusCode)
            {
                currentControl = await response.Content.ReadFromJsonAsync<RiskControl>();
                formButtonText = "Update Control";
            }
        }
        else // Update existing control
        {
            var response = await _client.PutAsJsonAsync($"{Endpoints.RiskControlsEndpoint}/{currentControl.Id}", currentControl);
            if (response.IsSuccessStatusCode)
            {
                currentControl = await response.Content.ReadFromJsonAsync<RiskControl>();
                formButtonText = "Update Control";
            }
        }
    }

    private async Task DeleteControl(int controlId)
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this control?");
        if (confirm)
        {
            var response = await _client.DeleteAsync($"{Endpoints.RiskControlsEndpoint}/{controlId}");
            if (response.IsSuccessStatusCode)
            {
                currentControl = new RiskControl { EvaluationId = evaluationId };
                formButtonText = "Create Control";
            }
        }
    }

    private void GoBack()
    {
        // _navManager.NavigateTo($"/assessments/{assessmentId}/evaluations/manage");
    }
}

