@page "/assessments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject NavigationManager _navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<h3 class="card-title">Risk Assessments Data</h3>

<br />

<a href="/assessments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Risk Assessment
</a>
<br />
<br />

@if (Assessments == null)
{
    <div class="alert alert-info">Loading Risk Assessments Data...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Department</th>
                <th>Process</th>
                <th>Location</th>
                <th>Assessment Date</th>
                <th>Last Review</th>
                <th>Next Review</th>
                <th>Leader</th>
                <th>Approver</th>
                <th>Approved Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assessment in Assessments)
            {
                var allowAccess = CheckUserAccess(assessment);
                <tr>
                    <td>@assessment.Name</td>
                    <td>@assessment.Department</td>
                    <td>@assessment.Process</td>
                    <td>@assessment.Location</td>
                    <td>@assessment.AssessmentDate.ToString("dd/MM/yyyy")</td>
                    <td>@assessment.LastReviewDate.ToString("dd/MM/yyyy")</td>
                    <td>@assessment.NextReviewDate.ToString("dd/MM/yyyy")</td>
                    <td>@assessment.Team?.Leader</td>
                    <td>@assessment.Approver</td>
                    <td>
                        @if(assessment.ApprovedStatus == true)
                        {
                            <span style="color: darkgreen">Form Approved</span>
                        }
                        else if(assessment.ApprovedStatus == false)
                        {
                            <span style="color: darkred">Form Unapproved</span>
                        }
                        else
                        {
                            <span style="color: orange">Pending Approval</span>
                        }
                    </td>
                    <td>
                        @if (allowAccess)
                        {
                            <div>
                                <a href="/assessments/@assessment.Id/edit" class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </a>
                            </div>
                            <div>
                                <a href="/assessments/@assessment.Id/view" class="btn btn-primary">
                                    <span class="oi oi-eye"></span>
                                </a>
                            </div>
                            <div>
                                <button class="btn btn-danger" @onclick="@(()=>Delete(assessment.Id))">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>                                                   
                        }
                        else
                        {
                            <span>No Access</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RiskAssessment>? Assessments;
    private string? userEmail;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Assessments = await _client.GetFromJsonAsync<List<RiskAssessment>>($"{Endpoints.RiskAssessmentsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
        }
    }

    private bool CheckUserAccess(RiskAssessment assessment)
    {
        if (string.IsNullOrEmpty(userEmail)) return false;

        if (userEmail.ToLower().Contains("admin")) return true;

        var userEmailNamePart = userEmail.ToLower().Split('@')[0].Replace(".", "").Replace("-", "");
        var approverEmailNamePart = assessment.Approver?.ToLower().Replace(" ", "");

        if (!string.IsNullOrEmpty(approverEmailNamePart) && userEmailNamePart.Contains(approverEmailNamePart))
        {
            return true;
        }

        var teamMembers = new List<string>
        {
            assessment.Team?.Leader,
            assessment.Team?.Member1,
            assessment.Team?.Member2,
            assessment.Team?.Member3,
            assessment.Team?.Member4,
            assessment.Team?.Member5
        };

        foreach (var member in teamMembers)
        {
            if (!string.IsNullOrEmpty(member))
            {
                var memberNamePart = member.ToLower().Replace(" ", "").Replace(".", "").Replace("-", "");
                if (userEmailNamePart.Contains(memberNamePart))
                {
                    return true;
                }
            }
        }

        return false;
    }

    async Task Delete(int assessmentId)
    {
        if (Assessments != null)
        {
            var assessment = Assessments.First(q => q.Id == assessmentId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this RA form?\n{assessment.Name}");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.RiskAssessmentsEndpoint}/{assessmentId}");
                await OnInitializedAsync();
                _navManager.NavigateTo("/assessments/", forceLoad: true);
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}