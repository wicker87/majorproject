@page "/assessments/{id:int}/view"
@inject HttpClient _client
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using System.Globalization;

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    table, th, td {
        border: 1px solid black;
    }

    th, td {
        padding: 6px;
    }

    th {
        text-align: center;
        background-color: #ffb366;
    }

    td {
        text-align: left;
    }
</style>
<AssessmentNavMenu AssessmentId="@id" />
<h3 class="card-title">View Risk Assessment</h3>
<hr />

@if (assessment == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@assessment.Name</h4>
    <br />
    <div style="display:flex; gap: 50px;">
        <div style="flex: 1; max-width: 440px;">
            <p><strong>Department:</strong> @assessment.Department</p>
            <p><strong>Process:</strong> @assessment.Process</p>
            <p><strong>Location:</strong> @assessment.Location</p>
        </div>
        <div style="flex: 1; max-width: 220px;">
            <p><strong>Assessment Date:</strong> @assessment.AssessmentDate.ToString("dd/MM/yyyy")</p>
            <p><strong>Last Review Date:</strong> @assessment.LastReviewDate.ToString("dd/MM/yyyy")</p>
            <p><strong>Next Review Date:</strong> @assessment.NextReviewDate.ToString("dd/MM/yyyy")</p>
        </div>
        <div style="flex: 1; max-width: 200px;">
            <p><strong>Leader:</strong> @assessment.Team?.Leader</p>
            <p><strong>Member 1:</strong> @assessment.Team?.Member1</p>
            <p><strong>Member 2:</strong> @assessment.Team?.Member2</p>
        </div>
        <div style="flex: 1; max-width: 200px;">
            <p><strong>Member 3:</strong> @assessment.Team?.Member3</p>
            <p><strong>Member 4:</strong> @assessment.Team?.Member4</p>
            <p><strong>Member 5:</strong> @assessment.Team?.Member5</p>
        </div>
        <div style="flex: 1; max-width: 200px;">
            <p style="text-decoration: underline;">Approved by</p>
            <p><strong>Name:</strong> @assessment.Approver</p>
            <p>
                <strong>Date: </strong>
                @if (@assessment.ApprovalDate != default(DateTime))
                {
                    @assessment.ApprovalDate.ToString("dd/MM/yyyy")
                }
                else
                {
                    <span style="color:red">Not Approved Yet</span>
                }
            </p>
        </div>
    </div>

    <table>
        <thead>
            <tr class="header">
                @* header row *@
                <th colspan="4">Hazard Identification</th>
                <th colspan="4">Risk Evaluation</th>
                <th colspan="7">Risk Control</th>
            </tr>
            <tr>
                @* sub-header row *@
                <th>Ref</th>
                <th>Work Activity</th>
                <th>Hazard</th>
                <th>Possible Injury/Ill-health</th>
                <th>Existing Controls</th>
                <th>S</th>
                <th>L</th>
                <th>RPN</th>
                <th>Additional Controls</th>
                <th>S</th>
                <th>L</th>
                <th>RPN</th>
                <th>Implementer</th>
                <th>Due Date</th>
                <th>Remarks</th>
            </tr>
        </thead>
        <tbody>
            @if (assessment.WorkActivities == null || !assessment.WorkActivities.Any())
            {
                <tr>
                    <td colspan="15">No Work Activities</td>
                </tr>
            }
            else
            {
                int index = 1;
                foreach (var activity in assessment.WorkActivities)
                {
                    var activityRowSpan = activity.Identifications?.Sum(h => h.RiskEvaluations?.Count() ?? 1) ?? 1;
                    if (activityRowSpan == 0) activityRowSpan = 1;
                    bool activityPrinted = false;

                    if (activity.Identifications == null || !activity.Identifications.Any())
                    {
                        <tr>
                            <td>@index</td>
                            <td>@activity.Name</td>
                            <td colspan="13">No Hazard</td>
                        </tr>
                        index++;
                    }
                    else
                    {
                        foreach (var hazard in activity.Identifications)
                        {
                            var hazardRowSpan = hazard.RiskEvaluations?.Count() ?? 1;
                            if (hazardRowSpan == 0) hazardRowSpan = 1;
                            bool hazardPrinted = false;

                            if (hazard.RiskEvaluations == null || !hazard.RiskEvaluations.Any())
                            {
                                <tr>
                                    <td colspan="4" style="color:darkred">▲ Please add Risk Evaluation for <strong>"@hazard.Name"</strong> to view data</td>
                                    <td colspan="11">No Risk Evaluation</td>                                   
                                </tr>
                            }
                            else
                            {
                                foreach (var evaluation in hazard.RiskEvaluations)
                                {
                                    <tr>
                                        @if (!activityPrinted)
                                        {
                                            <td rowspan="@activityRowSpan">@index</td>
                                            <td rowspan="@activityRowSpan">@activity.Name</td>
                                            activityPrinted = true;
                                            index++;
                                        }

                                        @if (!hazardPrinted)
                                        {
                                            <td rowspan="@hazardRowSpan">@hazard.Name</td>
                                            <td rowspan="@hazardRowSpan">@hazard.PossibleInjury</td>
                                            hazardPrinted = true;
                                        }

                                        <td>@evaluation.ExistingRiskControls</td>
                                        <td>@evaluation.Severity</td>
                                        <td>@evaluation.Likelihood</td>
                                        <td style="text-align:center">@evaluation.RPN</td>

                                        @if (evaluation.Control == null)
                                        {
                                            <td colspan="7">No Risk Control</td>
                                        }
                                       @*else
                                        {
                                            <td>@evaluation.Control?.AdditionalControls</td>
                                            <td>@evaluation.Control?.Severity</td>
                                            <td>@evaluation.Control?.Likelihood</td>
                                            <td>@evaluation.Control?.RPN</td>
                                            <td>@evaluation.Control?.ImplementingPerson</td>
                                            <td>
                                                @if (evaluation.Control.DueDate != default(DateTime))
                                                {
                                                    @evaluation.Control?.DueDate.ToString("dd/MM/yyyy")
                                                }
                                                else 
                                                {
                                                    <span>To be determined</span>
                                                }
                                            </td>
                                            <td>@evaluation.Control?.Remarks</td>
                                        }*@
                                    </tr>
                                }
                            }
                        }
                    }
                }
            }
        </tbody>
    </table>
    <br />
    @if (isApprover)
    {
        <EditForm Model="@assessment">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <br />
            @if (assessment.ApprovedStatus == true)
            {
                <button type="button" class="btn btn-warning" @onclick="UnapprovedAssessment">Unapproved Form</button>
                            
            }
            else if (assessment.ApprovedStatus == false)
            {
                <button type="button" class="btn btn-success" @onclick="ApproveAssessment">Approved Form</button>
            }
            else
            {
                <div style="display: flex; gap: 80px">
                    <div>
                        <button type="button" class="btn btn-success" @onclick="ApproveAssessment">Approved Form</button>
                    </div>
                    <div>
                        <button type="button" class="btn btn-warning" @onclick="UnapprovedAssessment">Unapproved Form</button>
                    </div>
                </div>
            }
        </EditForm>
    }
    <br />
    @if (showSuccessMessage)
    {
        <div class="alert alert-success" role="alert">
            Successfully change form approved status.
        </div>
        
    }
}

@code {

    [Parameter] public int id { get; set; }
    private RiskAssessment assessment;
    private bool showSuccessMessage = false;
    private bool isApprover = false;
    private string userEmail;

    protected async override Task OnParametersSetAsync()
    {
        // Load assessment data
        await LoadAssessmentAsync();

        // Subscribe to authentication state changes
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Load user data after loading the assessment
        await LoadUserDataAsync();
    }

    private async Task LoadAssessmentAsync()
    {
        assessment = await _client.GetFromJsonAsync<RiskAssessment>($"{Endpoints.RiskAssessmentsEndpoint}/{id}");
    }

    private async Task ApproveAssessment()
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", "Do you want to approve this form?");
        if (confirm)
        {
            if (assessment.ApprovedStatus != true)
            {
                assessment.ApprovedStatus = true;
                assessment.ApprovalDate = DateTime.Now;

                var response = await _client.PutAsJsonAsync($"{Endpoints.RiskAssessmentsEndpoint}/{id}", assessment);
                if (response.IsSuccessStatusCode)
                {
                    var alert = new Alert
                        {
                            AssessmentId = id,
                            Message = $"✅{assessment.Approver} (Manager) has approved the risk assessment, {assessment.Name}.",
                            DateTime = DateTime.Now,
                        };
                    await _client.PostAsJsonAsync(Endpoints.AlertsEndpoint, alert);

                    showSuccessMessage = true;
                    StateHasChanged();
                    await Task.Delay(3000); // Show message for 3 seconds
                    showSuccessMessage = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task UnapprovedAssessment()
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", "Do you want to unapproved this form?");
        if (confirm)
        {
            if (assessment.ApprovedStatus == true)
            {
                assessment.ApprovedStatus = false;
                assessment.ApprovalDate = default(DateTime);

                var response = await _client.PutAsJsonAsync($"{Endpoints.RiskAssessmentsEndpoint}/{id}", assessment);
                if (response.IsSuccessStatusCode)
                {
                    var alert = new Alert
                        {
                            AssessmentId = id,
                            Message = $"❎{assessment.Approver} (Manager) has unapproved the risk assessment, {assessment.Name}.",
                            DateTime = DateTime.Now,
                        };
                    await _client.PostAsJsonAsync(Endpoints.AlertsEndpoint, alert);

                    showSuccessMessage = true;
                    StateHasChanged();
                    await Task.Delay(3000); // Show message for 3 seconds
                    showSuccessMessage = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;

            if (!string.IsNullOrEmpty(assessment?.Approver))
            {
                var approverEmailNamePart = assessment.Approver.ToLower().Replace(" ", "");
                isApprover = userEmail.ToLower().Contains(approverEmailNamePart);
            }

            var roles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }
        else
        {
            userEmail = null;
            isApprover = false;
        }

        StateHasChanged(); // Force re-render
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            await LoadUserDataAsync();
            StateHasChanged(); // Force re-render
        });
    }
}


