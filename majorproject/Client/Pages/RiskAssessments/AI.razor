@page "/assessments/{id:int}/ai"
@inject HttpClient _client
@inject IJSRuntime js

<AssessmentNavMenu AssessmentId="@id" />
<h3 class="card-title">Preliminary Risk Assessment Generator</h3>
<hr />

<h5>This page allows users to upload images related to a work activity and automatically generates a preliminary<br />
risk assessment form using generative AI. Users can then manually review and adjust the generated assessment.</h5>
<br />
<InputFile class="form-control" style="width:400px; max-height:300px;" OnChange="HandleFileSelected" multiple />
<p style="color:red">* Can only accept up to 3 images per generate.</p>

@if (uploadedFiles != null && uploadedFiles.Any())
{
    <div class="mt-3">
        <h5>Image Details:</h5>
        <div class="d-flex flex-row">
            @foreach (var file in uploadedFiles)
            {
                <div class="p-2">
                    <img src="@file.DataUrl" alt="Uploaded Image" class="img-thumbnail" />
                    <p><strong>Name:</strong> @file.Name</p>
                    <p><strong>Type:</strong> @file.Type</p>
                    <p><strong>Size:</strong> @Math.Round(file.Size / 1024.0, 2) kB</p>
                </div>
            }
        </div>
        <br />
        <button class="btn btn-success btn-block">Generate</button>
    </div>
}

@code {
    
    [Parameter] public int id { get; set; }
    RiskAssessment? assessment = new RiskAssessment();

    private List<UploadedFile> uploadedFiles = new List<UploadedFile>();

    protected async override Task OnParametersSetAsync()
    {
        assessment = await _client.GetFromJsonAsync<RiskAssessment>($"{Endpoints.RiskAssessmentsEndpoint}/{id}");
    }

    // private async Task OpenChatGPT()
    // {
    //     await js.InvokeVoidAsync("window.open", "https://chatgpt.com/", "_blank");
    // }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles(3)) // Limit to 3 files
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            var dataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            uploadedFiles.Add(new UploadedFile
                {
                    Name = file.Name,
                    Type = file.ContentType,
                    Size = file.Size,
                    DataUrl = dataUrl
                });
        }

        // Optionally, you can perform additional actions with the file here, such as uploading it to a server
        // var buffer = new byte[uploadedFile.Size];
        // await uploadedFile.OpenReadStream().ReadAsync(buffer);
    }

    private class UploadedFile
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public long Size { get; set; }
        public string DataUrl { get; set; }
    }
}
