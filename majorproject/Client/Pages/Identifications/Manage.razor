@page "/assessments/{assessmentId:int}/hazards/manage"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js

<h3 class="card-title">Manage Hazards</h3>
<hr />
<br />

@foreach (var activity in activities)
{
    <h4><strong>Work Activity:</strong> @activity.Activity.Name</h4>
    <FormComponent ButtonText="@activity.FormButtonText" hazard="@activity.CurrentHazard" OnValidSubmit="() => CreateOrUpdateHazard(activity)" OnCancelEdit="() => CancelEdit(activity)" />
    <br />
    <ol>
        @foreach (var hazard in activity.Hazards)
        {
            <li>
                @hazard.Name
                <button @onclick="() => EditHazard(activity, hazard)" class="btn btn-link text-warning">Edit</button>
                <button @onclick="() => DeleteHazard(activity, hazard.Id, hazard.Name)" class="btn btn-link text-danger">Delete</button>
            </li>
        }
    </ol>
    <hr />
}

<div style="display: flex; gap: 80px">
    <div>
        <button @onclick="GoBack" class="btn btn-secondary"><span class="oi oi-arrow-left"></span> Back</button>
    </div>
    <div>
        <button @onclick="CompleteHazards" class="btn btn-success btn-block">Next <span class="oi oi-arrow-right"></span></button>
    </div>
</div>

@code {
    [Parameter] public int assessmentId { get; set; }

    private List<ActivityWrapper> activities = new List<ActivityWrapper>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch all activities for the specified assessment
        var activityList = await _client.GetFromJsonAsync<List<WorkActivity>>($"{Endpoints.WorkActivitiesEndpoint}/assessment/{assessmentId}");

        foreach (var activity in activityList)
        {
            var hazards = await _client.GetFromJsonAsync<List<Identification>>($"{Endpoints.IdentificationsEndpoint}/activity/{activity.Id}");
            activities.Add(new ActivityWrapper
                {
                    Activity = activity,
                    Hazards = hazards,
                    CurrentHazard = new Identification { ActivityId = activity.Id },
                    FormButtonText = "Create Hazard"
                });
        }
    }

    private async Task CreateOrUpdateHazard(ActivityWrapper activityWrapper)
    {
        var hazard = activityWrapper.CurrentHazard;

        if (hazard.Id == 0) // Create new hazard
        {
            var response = await _client.PostAsJsonAsync(Endpoints.IdentificationsEndpoint, hazard);
            if (response.IsSuccessStatusCode)
            {
                var newHazard = await response.Content.ReadFromJsonAsync<Identification>();
                activityWrapper.Hazards.Add(newHazard);
                activityWrapper.CurrentHazard = new Identification { ActivityId = activityWrapper.Activity.Id }; // Reset the form
            }
        }
        else // Update existing hazard
        {
            var response = await _client.PutAsJsonAsync($"{Endpoints.IdentificationsEndpoint}/{hazard.Id}", hazard);
            if (response.IsSuccessStatusCode)
            {
                var index = activityWrapper.Hazards.FindIndex(h => h.Id == hazard.Id);
                if (index != -1)
                {
                    activityWrapper.Hazards[index] = hazard;
                }
                activityWrapper.CurrentHazard = new Identification { ActivityId = activityWrapper.Activity.Id }; // Reset the form
                activityWrapper.FormButtonText = "Create Hazard";
            }
        }
    }

    private void EditHazard(ActivityWrapper activityWrapper, Identification hazard)
    {
        activityWrapper.CurrentHazard = hazard;
        activityWrapper.FormButtonText = "Update Hazard";
    }

    private void CancelEdit(ActivityWrapper activityWrapper)
    {
        activityWrapper.CurrentHazard = new Identification { ActivityId = activityWrapper.Activity.Id };
        activityWrapper.FormButtonText = "Create Hazard";
    }

    private async Task DeleteHazard(ActivityWrapper activityWrapper, int hazardId, string hazardName)
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {hazardName}?");
        if (confirm)
        {
            var response = await _client.DeleteAsync($"{Endpoints.IdentificationsEndpoint}/{hazardId}");
            if (response.IsSuccessStatusCode)
            {
                activityWrapper.Hazards = activityWrapper.Hazards.Where(h => h.Id != hazardId).ToList();
            }
        }
    }

    private void CompleteHazards()
    {
        _navManager.NavigateTo($"/assessments/{assessmentId}/evaluations/manage"); 
    }

    private void GoBack()
    {
        _navManager.NavigateTo($"/assessments/{assessmentId}/activities/manage");
    }

    private class ActivityWrapper
    {
        public WorkActivity Activity { get; set; }
        public List<Identification> Hazards { get; set; }
        public Identification CurrentHazard { get; set; }
        public string FormButtonText { get; set; }
    }
}
