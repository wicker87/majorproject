<EditForm Model="@hazard" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label> Hazard: </label>
            <div>
                <InputTextArea @bind-Value="hazard.Name" class="form-control" style="width: 300px; height: 80px; resize: none;" />
                <ValidationMessage For="@(() => hazard.Name)" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <label> Possible Injury: </label>
            <div>
                <InputTextArea @bind-Value="hazard.PossibleInjury" class="form-control" style="width: 300px; height: 80px; resize: none;" />
                <ValidationMessage For="@(() => hazard.Name)" />
            </div>
        </div>
    </fieldset>
    <br />
    <div style="display: flex; gap: 20px">
        <div>
            @if (!Disabled)
            {
                <button type="submit" class="btn btn-secondary">
                    @ButtonText
                </button>
            }
        </div>
        @if (ButtonText == "Update Hazard")
        {
            <div>
                <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
            </div>
        }
    </div>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Identification? hazard { get; set; } 
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; } 
    [Parameter] public EventCallback OnCancelEdit { get; set; }

    private void CancelEdit()
    {
        if (OnCancelEdit.HasDelegate)
        {
            OnCancelEdit.InvokeAsync(null);
        }
    }

}
