@page "/activities/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor 
@implements IDisposable 

<h3 class="card-title">Activities Data</h3>

<br />

<a href="/activities/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Activity
</a>
<br />
<br />

@if (Activities == null)
{
    <div class="alert alert-info">Loading Activities Data...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Work Activity</th>
                <th>Form Id</th>              
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Activities)
            {
                <tr>
                    <td>@activity.WorkActivity</td>
                    <td>@activity.FormId</td>                
                    <td>
                        <a href="/activities/edit/@activity.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <a href="/activities/view/@activity.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(activity.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Activity>? Activities;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Activities = await _client.GetFromJsonAsync<List<Activity>>($"{Endpoints.ActivitiesEndpoint}");
    }

    async Task Delete(int activityId)
    {
        if (Activities != null)
        {
            var activity = Activities.First(q => q.Id == activityId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {activity.WorkActivity}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ActivitiesEndpoint}/{activityId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}