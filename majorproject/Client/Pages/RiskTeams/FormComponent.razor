@inject IJSRuntime js
@inject HttpClient _client

<h6>Note that a riskteam must have minimum 3 members.</h6>
<EditForm Model="@riskteam" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label> Leader: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Leader" class="form-control" style="width: 500px;">
                    <option value="">-- Select Leader --</option>
                     @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Leader)" />
            </div>  
        </div>
        <br />
        <div class="form-group">
            <label> Member 1: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Member1" class="form-control" style="width: 500px;">
                    <option value="">-- Select Member 1 --</option>
                    @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Member1)" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <label> Member 2: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Member2" class="form-control" style="width: 500px;">
                    <option value="">-- Select Member 2 --</option>
                    @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Member2)" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <label> Member 3: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Member3" class="form-control" style="width: 500px;">
                    <option value="">-- Select Member 3 --</option>
                    @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Member3)" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <label> Member 4: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Member4" class="form-control" style="width: 500px;">
                    <option value="">-- Select Member 4 --</option>
                    @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Member4)" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <label> Member 5: </label>
            <div>
                <InputSelect @bind-Value="riskteam.Member5" class="form-control" style="width: 500px;">
                    <option value="">-- Select Member 5 --</option>
                   @if (Users != null)
                    {
                        var safetyInspectors = Users.Where(e => e.Designation == "Safety Inspector")
                        .OrderBy(e => e.FirstName);
                        foreach (var user in safetyInspectors)
                        {
                            <option value="@user.FirstName @user.LastName">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => riskteam.Member5)" />
            </div>
        </div>
    </fieldset>
    <br />
    <div style="display: flex; gap: 80px">
        <div>
            @if (!Disabled)
            {
                <button type="submit" class="btn btn-success btn-block">
                    @ButtonText
                </button>
            }
        </div>
        <div>
            <BackToList Target="riskteams" />
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public RiskTeam? riskteam { get; set; }
    [Parameter] public List<UserRoleDto>? Users { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; } 
}
