@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navManager
@inject HttpClient _client

@* Top Menu Bar Links/Buttons*@

<style>
    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-menu {
        display: none; /* Hide by default */
        position: absolute;
        background-color: #f9f9f9;
        width: 300px;
        max-height: 360px; /* Set a max height for the dropdown menu */
        overflow-y: auto; /* Enable vertical scrolling */
        box-shadow: 0px 4px 10px 0px rgba(0,0,0,0.2);
        z-index: 1;
        right: -100px;
        top: 132%;
    }

    .dropdown-item {
        color: black;
        padding: 2px 10px;
        text-decoration: none;
        display: block;
        width: 100%; /* Ensure items fit within the menu */
        box-sizing: border-box; /* Include padding in the width calculation */
        white-space: normal; /* Allow text to wrap */
        word-break: break-word; /* Ensure long words break */
    }

        .dropdown-item:hover {
            background-color: #e0e0e0; /* Change background color on hover */
            color: black; /* Keep text color black */
        }

    .dropdown-toggle.active + .dropdown-menu {
        display: block; /* Show menu when toggle is active */
    }
</style>

<script>
    function toggleDropdown() {

        var button = document.getElementById('alertsButton');
        var dropdownMenu = button.nextElementSibling;

        // Toggle the active class on the button
        button.classList.toggle('active');

        // Toggle the display of the dropdown menu
        if (dropdownMenu.style.display === 'block') {
            dropdownMenu.style.display = 'none';
        } else {
            dropdownMenu.style.display = 'block';
        }
    }

    // Close the dropdown if clicked outside
    window.onclick = function (event) {
        if (!event.target.matches('.dropdown-toggle')) {
            var dropdowns = document.getElementsByClassName("dropdown-menu");
            for (var i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.style.display === 'block') {
                    openDropdown.style.display = 'none';
                }
            }

            var toggles = document.getElementsByClassName("dropdown-toggle");
            for (var i = 0; i < toggles.length; i++) {
                toggles[i].classList.remove('active');
            }
        }
    }
</script>

<AuthorizeView>
    <Authorized>
        @if (userRoles == null)
        {
            <span>Welcome, @userEmail</span>
        }
        else if (userRoles.Contains("Administrator"))
        {
            <span>Welcome, @userEmail (<strong>Administrator</strong>)</span>
        }
        else if (userRoles.Contains("Manager"))
        {
            <span>Welcome, @userEmail (<strong>Manager</strong>)</span>
        }
        else if (userRoles.Contains("Employee"))
        {
            <span>Welcome, @userEmail (<strong>Employee</strong>)</span>
        }
        else
        {
            <span>Welcome, User</span>
        }
        
        <div class="dropdown">
            <button class="nav-link btn btn-link dropdown-toggle" id="alertsButton" title="Alerts" @onmousedown="ReloadAlerts" onclick="toggleDropdown()"><i class="fas fa-bell fa-lg"></i></button>
            <div class="dropdown-menu">
                @if (userAlerts == null || !userAlerts.Any())
                {
                    <div style="text-align:center">- - - - - - No alerts - - - - - -</div>
                }
                else
                {
                    @foreach (var alert in userAlerts)
                    {
                        <div class="dropdown-item" @onclick="() => NavigateToAssessment(alert.AssessmentId)">
                            @alert.Message
                            <br />
                            <small style="display:block; text-align:right;">@alert.DateTime.ToString("ddd, dd MMM, hh:mm tt")</small>
                        </div>
                        <hr />
                    }
                }
            </div>
        </div>

        <a href="authentication/profile"><i title="Account Settings" class="fas fa-user-circle fa-lg"></i></a>
        <button class="nav-link btn btn-link" @onclick="BeginLogOut"><i class="fas fa-sign-out-alt fa-lg"></i> Logout</button>
    </Authorized>
    <NotAuthorized>
        <a href="https://www.mom.gov.sg/workplace-safety-and-health/safety-and-health-management-systems/risk-management" target="_blank">
            <i class="fas fa-info-circle fa-lg"></i> About Risk Management
        </a>
        @* <a href="authentication/register"><i class="fas fa-user-plus fa-lg"></i> Register</a> *@
        <a href="authentication/login"><i class="fas fa-sign-in-alt fa-lg"></i> Login</a>
    </NotAuthorized>
</AuthorizeView>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

@code {
    private List<string> userRoles;
    private string userEmail;
    private List<Alert>? userAlerts;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name; // Set the email name

            if (userEmail.ToLower().Contains("admin"))
            {
                userRoles = new List<string> { "Administrator" };
            }
            else if (userEmail.ToLower().Contains("manager"))
            {
                userRoles = new List<string> { "Manager" };
            }
            else if (userEmail.ToLower().Contains("employee"))
            {
                userRoles = new List<string> { "Employee" };
            }
            else
            {
                userRoles = user.Claims
                    .Where(c => c.Type == ClaimTypes.Role)
                    .Select(c => c.Value)
                    .ToList();
            }
            await LoadUserAlertsAsync(); // Load relevant alerts
        }
        else
        {
            userRoles = null;
            userEmail = null;
        }

        StateHasChanged(); // Force re-render
    }

    public async Task ReloadAlerts()
    {
        await LoadUserAlertsAsync();
        StateHasChanged(); // Ensure the UI is updated
    }

    private async Task LoadUserAlertsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userEmail = user.Identity.Name;

            // Fetch all risk assessments
            var riskAssessments = await _client.GetFromJsonAsync<List<RiskAssessment>>($"{Endpoints.RiskAssessmentsEndpoint}");

            bool isAdmin = userEmail.ToLower().Contains("admin");

            // Fetch all alerts
            var alerts = await _client.GetFromJsonAsync<List<Alert>>($"{Endpoints.AlertsEndpoint}");

            if (isAdmin)
            {
                // Admins can access all alerts
                userAlerts = alerts.OrderByDescending(alert => alert.DateTime).ToList();
            }
            else
            {
                // Filter risk assessments where the user is a member or approver
                var userRiskAssessments = riskAssessments.Where(ra =>
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Leader) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Member1) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Member2) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Member3) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Member4) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Team.Member5) ||
                    NormalizedEmail(userEmail) == NormalizeName(ra.Approver)
                ).Select(ra => ra.Id).ToList();

                // Filter alerts related to the user's risk assessments
                userAlerts = alerts
                .Where(alert => alert.AssessmentId.HasValue && userRiskAssessments.Contains(alert.AssessmentId.Value))
                .OrderByDescending(alert => alert.DateTime)
                .Take(20)
                .ToList();
            }           
        }
    }

    private string NormalizeName(string name)
    {
        if (string.IsNullOrEmpty(name))
        {
            return string.Empty;
        }

        return name.ToLower().Replace(" ", "");
    }

    private string NormalizedEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            return string.Empty;
        }

        var normalizedEmail = email.ToLower().Replace(" ", "");
        var emailParts = normalizedEmail.Split('@');
        return emailParts[0];
    }

    private void NavigateToAssessment(int? assessmentId)
    {
        _navManager.NavigateTo($"/assessments/{assessmentId}/view");
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            await LoadUserDataAsync();
            StateHasChanged(); // Force re-render
        });
    }

    private void BeginLogOut() // Logout of application
    {
        _navManager.NavigateToLogout("authentication/logout");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}

