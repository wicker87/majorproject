@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@using System.Security.Claims


@* Top Left Button *@
<div class="top-row ps-1 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><img src="Hazard.png" height="36"> Risk Assessor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

@* Side bar buttons *@
<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView>
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="assessments">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Risk Assessments
                </NavLink>
            </div>
            @if (isManager)
            {
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="riskteams">
                        <span class="oi oi-people" aria-hidden="true"></span> Risk Teams
                    </NavLink>
                </div>
            }          
            @if (isAdmin)
            {
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="activities">
                        <span class="oi oi-list" aria-hidden="true"></span> Work Activities
                    </NavLink>
                </div>
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="hazards">
                        <span class="oi oi-list" aria-hidden="true"></span> Hazards
                    </NavLink>
                </div>
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="riskevaluations">
                        <span class="oi oi-list" aria-hidden="true"></span> Risk Evaluations
                    </NavLink>
                </div>
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="riskcontrols">
                        <span class="oi oi-list" aria-hidden="true"></span> Risk Controls
                    </NavLink>
                </div>
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="riskteams">
                        <span class="oi oi-people" aria-hidden="true"></span> Risk Teams
                    </NavLink>
                </div>
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="userroles" Match="NavLinkMatch.All">
                        <span class="oi oi-person" aria-hidden="true"></span> User Roles
                    </NavLink>
                </div>
            }

        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    // NavMenu-link authorization code (START) -----------------------------------------------
    private bool isAdmin = false;
    private bool isManager = false;
    private bool isEmployee = false;
    private string userEmail;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;

            if (userEmail.ToLower().Contains("admin"))
            {
                isAdmin = true;
            }
            else if (userEmail.ToLower().Contains("manager"))
            {
                isManager = true;
            }
            else if (userEmail.ToLower().Contains("employee"))
            {
                isEmployee = true;
            }

            var roles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }
        else
        {
            userEmail = null;
            isAdmin = false;
            isManager = false;
        }

        StateHasChanged(); // Force re-render
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            await LoadUserDataAsync();
            StateHasChanged(); // Force re-render
        });
    }
    // NavMenu-link authorization code (END) -----------------------------------------------

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
